function bullseyeSE(startTime){
	var posX = 256;
	var posY = 300;
	posX = posX + 64;
	posY = posY + 55;
	var moveUp = -20;
	var moveTime = 609;
	var tick = 76;
	var bullLayer0 = new Sprite("SB/Onion Layer/Onion0.png");
	var bullLayer1 = new Sprite("SB/Onion Layer/Onion1.png");
	var bullLayer2 = new Sprite("SB/Onion Layer/Onion2.png");
	var bullLayer3 = new Sprite("SB/Onion Layer/Onion3.png");
	
	/*
	bullLayer0.move(startTime, startTime + moveTime + (tick * 2), posX, posY, posX, posY + moveUp);
	bullLayer1.move(startTime, startTime + moveTime + (tick * 2), posX, posY, posX, posY + moveUp);
	bullLayer2.move(startTime, startTime + moveTime + (tick * 2), posX, posY, posX, posY + moveUp);
	bullLayer3.move(startTime, startTime + moveTime + (tick * 2), posX, posY, posX, posY + moveUp);
	
	bullLayer0.scale(1, startTime + (tick * 0), startTime + (tick * 3), 2, 0.2);
	bullLayer1.scale(1, startTime + (tick * 1), startTime + (tick * 4), 2.5, 0.3);
	bullLayer2.scale(1, startTime + (tick * 2), startTime + (tick * 5), 3, 0.4);
	bullLayer3.scale(1, startTime + (tick * 3), startTime + (tick * 6), 3.5, 0.5);
	
	bullLayer0.fade(1, startTime + (tick * 0), startTime + (tick * 1), 0, 1);
	bullLayer1.fade(1, startTime + (tick * 1), startTime + (tick * 2), 0, 1);
	bullLayer2.fade(1, startTime + (tick * 2), startTime + (tick * 3), 0, 1);
	bullLayer3.fade(1, startTime + (tick * 3), startTime + (tick * 4), 0, 1);
	*/
	/*
	bullLayer3.fade(2, startTime + (tick * 4), startTime + (tick * 5), 1, 0);
	bullLayer2.fade(2, startTime + (tick * 5), startTime + (tick * 6), 1, 0);
	bullLayer1.fade(2, startTime + (tick * 6), startTime + (tick * 7), 1, 0);
	bullLayer0.fade(2, startTime + (tick * 7), startTime + (tick * 8), 1, 0);
	*/
	
	/*
	bullLayer0.scale(1, startTime + (tick * 7), startTime + (tick * 8), 0.2, 5);
	bullLayer1.scale(1, startTime + (tick * 6), startTime + (tick * 7), 0.3, 5);
	bullLayer2.scale(1, startTime + (tick * 5), startTime + (tick * 6), 0.4, 5);
	bullLayer3.scale(1, startTime + (tick * 4), startTime + (tick * 5), 0.5, 5);
	*/
}

//bullseyeSE(80923);
//bullseyeSE(201532);

function petalFront2(startTime, endTime){
	var flyDurSL = 1219 + 609;
	var flyDur = 1219;
	var startY = rand(0, 480);
	startY = startY + 55;
	var startX = -180 + 64;
	var sizePetal = 1;
	var randFade = 0;
	var randSpinStart = 0;
	var randSpinEnd = 3;
	var petalSizeVarySM = 0.6;
	var petalSizeVary = 0.9;
	var colourPetal = 0;
	 // Smaller, slower
	for(var i=startTime; i < endTime + flyDur; i++){
		colourPetal = rand(230, 255);
		startY = rand(0, 480);
		startY = startY + 55;
		randFade = rand(-30, 30);
		sizePetal = rand(100, 170);
		randSpinStart = rand(0, 300);
		randSpinStart = randSpinStart / 100.0;
		randSpinEnd = rand(-400,400);
		randSpinEnd = randSpinEnd / 100.0;
		sizePetal = sizePetal / 100.0;
		if(i < (endTime - 610)){
		var petal1 = new Sprite("SB/petal1.png");
		petal1.moveX(0, i, i + flyDurSL, startX, startX + 900);
		petal1.moveY(2, i, i + flyDurSL, startY, startY - 200);
		petal1.rotate(2, i, i + flyDurSL, randSpinStart, randSpinStart + randSpinEnd);
		petal1.scale(i, i + (flyDurSL / 2), sizePetal - petalSizeVarySM, sizePetal);
		petal1.scale(i + (flyDurSL / 2), i + flyDurSL, sizePetal, sizePetal - petalSizeVarySM);
		petal1.color(colourPetal, 0, 0);
		
		
		if(i > (endTime - 1219)){
			petal1.fade(0, (endTime - 1219), (endTime - 1219) + (flyDurSL / 2), 0, 0);
		}
		else {
			petal1.fade(0, i + (flyDurSL / 2) + randFade, i + (flyDurSL) + randFade, 1, 0);
			if(i < (startTime + 609)){
				petal1.fade(0, (startTime + 609), (startTime + 609) + (flyDurSL / 2), 0, 1);
			}
			else {
				petal1.fade(0, i, i + (flyDurSL / 2) + randFade, 0, 1);
			}
		}
		
		}
		i = i + 151;
	}
	 // Bigger, faster
	 startTime = startTime - 76;
	for(var i=startTime; i < endTime + flyDur; i++){
		colourPetal = rand(230, 255);
		startY = rand(0, 480);
		startY = startY + 55;
		randFade = rand(-30, 30);
		sizePetal = rand(150, 230);
		sizePetal = sizePetal / 100.0;
		randSpinStart = rand(0, 300);
		randSpinStart = randSpinStart / 100.0;
		randSpinEnd = rand(-400,400);
		randSpinEnd = randSpinEnd / 100.0;
		if(i < (endTime - 610)){
		var petal1 = new Sprite("SB/petal1.png");
		petal1.moveX(0, i, i + flyDur, startX, startX + 900);
		petal1.moveY(2, i, i + flyDur, startY, startY - 200);
		petal1.rotate(2, i, i + flyDur, randSpinStart, randSpinStart + randSpinEnd);
		petal1.scale(i, i + (flyDur / 2), sizePetal - petalSizeVary, sizePetal);
		petal1.scale(i + (flyDur / 2), i + flyDur, sizePetal, sizePetal - petalSizeVary);
		petal1.color(colourPetal, 0, 0);
		
		if(i > (endTime - 1219)){
			petal1.fade(0, (endTime - 1219), (endTime - 1219) + (flyDur / 2), 0, 0);
		}
		else {
			petal1.fade(0, i + (flyDur / 2) + randFade, i + (flyDur) + randFade, 1, 0);
			if(i < (startTime + 609)){
				petal1.fade(0, (startTime + 609), (startTime + 609) + (flyDur / 2), 0, 1);
			}
			else {
				petal1.fade(0, i, i + (flyDur / 2) + randFade, 0, 1);
			}
		}
		
		}
		i = i + 151;
	}
}

function petalBack2(startTime, endTime){
	var flyDurSL = 1219 + 609;
	var flyDur = 1219;
	var startY = rand(0, 480);
	startY = startY + 55;
	var startX = 740 + 64;
	var sizePetal = 1;
	var randFade = 0;
	var randSpinStart = 0;
	var randSpinEnd = 3;
	var petalSizeVarySM = 0.05;
	var petalSizeVary = 0.1;
	var colourPetal = 0;
	
	 // Smaller, slower
	for(var i=startTime; i < endTime + flyDur; i++){
		colourPetal = rand(230, 255);
		startY = rand(0, 480);
		startY = startY + 55;
		randFade = rand(-30, 30);
		sizePetal = rand(50, 80);
		randSpinStart = rand(0, 300);
		randSpinStart = randSpinStart / 100.0;
		randSpinEnd = rand(-500,500);
		randSpinEnd = randSpinEnd / 100.0;
		sizePetal = sizePetal / 100.0;
		if(i < (endTime - 610)){
		var petal1 = new Sprite("SB/petal1.png", Background, Centre);
		petal1.moveX(0, i, i + flyDurSL, startX, startX - 900);
		petal1.moveY(2, i, i + flyDurSL, startY, startY + 200);
		petal1.rotate(2, i, i + flyDurSL, randSpinStart, randSpinStart + randSpinEnd);
		petal1.scale(i, i + (flyDurSL / 2), sizePetal + petalSizeVarySM, sizePetal);
		petal1.scale(i + (flyDurSL / 2), i + flyDurSL, sizePetal, sizePetal + petalSizeVarySM);
		petal1.color(colourPetal, 0, 0);
		
		if(i > (endTime - 1219)){
			petal1.fade(0, (endTime - 1219), (endTime - 1219) + (flyDurSL / 2), 0, 0);
		}
		else {
			petal1.fade(0, i + (flyDurSL / 2) + randFade, i + (flyDurSL) + randFade, 1, 0);
			if(i < (startTime + 609)){
				petal1.fade(0, (startTime + 609), (startTime + 609) + (flyDurSL / 2), 0, 1);
			}
			else {
				petal1.fade(0, i, i + (flyDurSL / 2) + randFade, 0, 1);
			}
		}
		
		}
		i = i + 151;
	}
	 // Bigger, faster
	 startTime = startTime - 76;
	for(var i=startTime; i < endTime + flyDur; i++){
		colourPetal = rand(230, 255);
		startY = rand(0, 480);
		startY = startY + 55;
		randFade = rand(-30, 30);
		sizePetal = rand(70, 90);
		sizePetal = sizePetal / 100.0;
		randSpinStart = rand(0, 300);
		randSpinStart = randSpinStart / 100.0;
		randSpinEnd = rand(-500, 500);
		randSpinEnd = randSpinEnd / 100.0;
		if(i < (endTime - 610)){
		var petal1 = new Sprite("SB/petal1.png", Background, Centre);
		petal1.moveX(0, i, i + flyDur, startX, startX - 900);
		petal1.moveY(2, i, i + flyDur, startY, startY + 200);
		petal1.rotate(2, i, i + flyDur, randSpinStart, randSpinStart + randSpinEnd);
		petal1.scale(i, i + (flyDur / 2), sizePetal + petalSizeVary, sizePetal);
		petal1.scale(i + (flyDur / 2), i + flyDur, sizePetal, sizePetal + petalSizeVary);
		petal1.color(colourPetal, 0, 0);
		
		if(i > (endTime - 1219)){
			petal1.fade(0, (endTime - 1219), (endTime - 1219) + (flyDur / 2), 0, 0);
		}
		else {
			petal1.fade(0, i + (flyDur / 2) + randFade, i + (flyDur) + randFade, 1, 0);
			if(i < (startTime + 609)){
				petal1.fade(0, (startTime + 609), (startTime + 609) + (flyDur / 2), 0, 1);
			}
			else {
				petal1.fade(0, i, i + (flyDur / 2) + randFade, 0, 1);
			}
		}
		
		}
		i = i + 151;
	}
}

function petalAria2(startTime, endTime){
	petalFront2(startTime, endTime);
	petalBack2(startTime, endTime);
}

//petalAria2(103156,113511);

function petalFront(startTime, endTime){
	var flyDurSL = 1219 + 609;
	var flyDur = 1219;
	var startY = rand(0, 480);
	startY = startY + 55;
	var startX = -180 + 64;
	var sizePetal = 1;
	var randFade = 0;
	var randSpinStart = 0;
	var randSpinEnd = 3;
	var petalSizeVarySM = 0.6;
	var petalSizeVary = 0.9;
	var colourPetal = 0;
	 // Smaller, slower
	for(var i=startTime; i < endTime + flyDur; i++){
		colourPetal = rand(230, 255);
		startY = rand(0, 480);
		startY = startY + 55;
		randFade = rand(-30, 30);
		sizePetal = rand(100, 170);
		randSpinStart = rand(0, 300);
		randSpinStart = randSpinStart / 100.0;
		randSpinEnd = rand(-400,400);
		randSpinEnd = randSpinEnd / 100.0;
		sizePetal = sizePetal / 100.0;
		if(i < (endTime - 610)){
		var petal1 = new Sprite("SB/petal1.png");
		petal1.moveX(0, i, i + flyDurSL, startX, startX + 900);
		petal1.moveY(2, i, i + flyDurSL, startY, startY - 200);
		petal1.rotate(2, i, i + flyDurSL, randSpinStart, randSpinStart + randSpinEnd);
		petal1.scale(i, i + (flyDurSL / 2), sizePetal - petalSizeVarySM, sizePetal);
		petal1.scale(i + (flyDurSL / 2), i + flyDurSL, sizePetal, sizePetal - petalSizeVarySM);
		petal1.color(colourPetal, 0, 0);
		
		
		if(i > 46506){
			petal1.fade(0, 46506, 46506 + (flyDurSL / 2), 0, 0);
		}
		else {
			petal1.fade(0, i + (flyDurSL / 2) + randFade, i + (flyDurSL) + randFade, 1, 0);
			if(i < 37978){
				petal1.fade(0, 37978, 37978 + (flyDurSL / 2), 0, 1);
			}
			else {
				petal1.fade(0, i, i + (flyDurSL / 2) + randFade, 0, 1);
			}
		}
		
		}
		i = i + 151;
	}
	 // Bigger, faster
	 startTime = startTime - 76;
	for(var i=startTime; i < endTime + flyDur; i++){
		colourPetal = rand(230, 255);
		startY = rand(0, 480);
		startY = startY + 55;
		randFade = rand(-30, 30);
		sizePetal = rand(150, 230);
		sizePetal = sizePetal / 100.0;
		randSpinStart = rand(0, 300);
		randSpinStart = randSpinStart / 100.0;
		randSpinEnd = rand(-400,400);
		randSpinEnd = randSpinEnd / 100.0;
		if(i < (endTime - 610)){
		var petal1 = new Sprite("SB/petal1.png");
		petal1.moveX(0, i, i + flyDur, startX, startX + 900);
		petal1.moveY(2, i, i + flyDur, startY, startY - 200);
		petal1.rotate(2, i, i + flyDur, randSpinStart, randSpinStart + randSpinEnd);
		petal1.scale(i, i + (flyDur / 2), sizePetal - petalSizeVary, sizePetal);
		petal1.scale(i + (flyDur / 2), i + flyDur, sizePetal, sizePetal - petalSizeVary);
		petal1.color(colourPetal, 0, 0);
		
		if(i > 46506){
			petal1.fade(0, 46506, 46506 + (flyDur / 2), 0, 0);
		}
		else {
			petal1.fade(0, i + (flyDur / 2) + randFade, i + (flyDur) + randFade, 1, 0);
			if(i < 37978){
				petal1.fade(0, 37978, 37978 + (flyDur / 2), 0, 1);
			}
			else {
				petal1.fade(0, i, i + (flyDur / 2) + randFade, 0, 1);
			}
		}
		
		}
		i = i + 151;
	}
}

function petalBack(startTime, endTime){
	var flyDurSL = 1219 + 609;
	var flyDur = 1219;
	var startY = rand(0, 480);
	startY = startY + 55;
	var startX = 740 + 64;
	var sizePetal = 1;
	var randFade = 0;
	var randSpinStart = 0;
	var randSpinEnd = 3;
	var petalSizeVarySM = 0.05;
	var petalSizeVary = 0.1;
	var colourPetal = 0;
	
	 // Smaller, slower
	for(var i=startTime; i < endTime + flyDur; i++){
		colourPetal = rand(230, 255);
		startY = rand(0, 480);
		startY = startY + 55;
		randFade = rand(-30, 30);
		sizePetal = rand(50, 80);
		randSpinStart = rand(0, 300);
		randSpinStart = randSpinStart / 100.0;
		randSpinEnd = rand(-500,500);
		randSpinEnd = randSpinEnd / 100.0;
		sizePetal = sizePetal / 100.0;
		if(i < (endTime - 610)){
		var petal1 = new Sprite("SB/petal1.png", Background, Centre);
		petal1.moveX(0, i, i + flyDurSL, startX, startX - 900);
		petal1.moveY(2, i, i + flyDurSL, startY, startY + 200);
		petal1.rotate(2, i, i + flyDurSL, randSpinStart, randSpinStart + randSpinEnd);
		petal1.scale(i, i + (flyDurSL / 2), sizePetal + petalSizeVarySM, sizePetal);
		petal1.scale(i + (flyDurSL / 2), i + flyDurSL, sizePetal, sizePetal + petalSizeVarySM);
		petal1.color(colourPetal, 0, 0);
		
		if(i > 46506){
			petal1.fade(0, 46506, 46506 + (flyDurSL / 2), 0, 0);
		}
		else {
			petal1.fade(0, i + (flyDurSL / 2) + randFade, i + (flyDurSL) + randFade, 1, 0);
			if(i < 37978){
				petal1.fade(0, 37978, 37978 + (flyDurSL / 2), 0, 1);
			}
			else {
				petal1.fade(0, i, i + (flyDurSL / 2) + randFade, 0, 1);
			}
		}
		
		}
		i = i + 151;
	}
	 // Bigger, faster
	 startTime = startTime - 76;
	for(var i=startTime; i < endTime + flyDur; i++){
		colourPetal = rand(230, 255);
		startY = rand(0, 480);
		startY = startY + 55;
		randFade = rand(-30, 30);
		sizePetal = rand(70, 90);
		sizePetal = sizePetal / 100.0;
		randSpinStart = rand(0, 300);
		randSpinStart = randSpinStart / 100.0;
		randSpinEnd = rand(-500, 500);
		randSpinEnd = randSpinEnd / 100.0;
		if(i < (endTime - 610)){
		var petal1 = new Sprite("SB/petal1.png", Background, Centre);
		petal1.moveX(0, i, i + flyDur, startX, startX - 900);
		petal1.moveY(2, i, i + flyDur, startY, startY + 200);
		petal1.rotate(2, i, i + flyDur, randSpinStart, randSpinStart + randSpinEnd);
		petal1.scale(i, i + (flyDur / 2), sizePetal + petalSizeVary, sizePetal);
		petal1.scale(i + (flyDur / 2), i + flyDur, sizePetal, sizePetal + petalSizeVary);
		petal1.color(colourPetal, 0, 0);
		
		if(i > 46506){
			petal1.fade(0, 46506, 46506 + (flyDur / 2), 0, 0);
		}
		else {
			petal1.fade(0, i + (flyDur / 2) + randFade, i + (flyDur) + randFade, 1, 0);
			if(i < 37978){
				petal1.fade(0, 37978, 37978 + (flyDur / 2), 0, 1);
			}
			else {
				petal1.fade(0, i, i + (flyDur / 2) + randFade, 0, 1);
			}
		}
		
		}
		i = i + 151;
	}
}

function petalAria(startTime, endTime){
	petalFront(startTime, endTime);
	petalBack(startTime, endTime);
}

//petalAria(37369,47725);

function asphyxia(startTime){

	var endTime = startTime + 937;
	var size = 0.1;
	var moveDown = 50;
	
	var posX = -50 + 64;
	var posY = 340 + 55;
	
	var opposite = 0;

	var onionOne = new Sprite("SB/Onion Layer/Onion0.png");
	var onionTwo = new Sprite("SB/Onion Layer/Onion1.png");
	var onionThree = new Sprite("SB/Onion Layer/Onion2.png");
	var onionFour = new Sprite("SB/Onion Layer/Onion3.png");
	
	var tick = 156;
	var tickFour = 234; // go four times
	var tickThree = 312; //go three times
	var tickTwo = 468;
	
	/*
	onionOne.color(0,0,0);
	onionTwo.color(0,0,0);
	onionThree.color(0,0,0);
	onionFour.color(0,0,0);
	*/
	
	onionOne.fade(startTime, startTime + tickTwo, 0, 1);
	onionOne.fade(startTime + tickTwo, endTime - tickTwo, 1, 1);
	onionOne.fade(endTime - tickTwo, endTime, 1, 1);
	onionOne.fade(endTime, endTime + 1875, 1, 1);
	onionOne.fade(endTime + 1875, endTime + 1875 + tickTwo, 1, 0);
	onionOne.scaleVec(25, startTime+(tick*6),endTime + 937, size, size, 0.7, 0.7);
	
	var newEndTime = endTime + 1875;
	
	onionTwo.fade(startTime, startTime + tickTwo, 0, 1);
	onionTwo.fade(startTime + tickTwo, endTime - tickTwo, 1, 1);
	onionTwo.fade(endTime - tickTwo, endTime, 1, 1);
	onionTwo.fade(endTime, endTime + tick, 1, 0);
	
	onionThree.fade(startTime, startTime + tickTwo, 0, 1);
	onionThree.fade(startTime + tickTwo, endTime - tickTwo, 1, 1);
	onionThree.fade(endTime - tickTwo, endTime, 1, 1);
	onionThree.fade(endTime, endTime + tick, 1, 0);
	
	onionFour.fade(startTime, startTime + tickTwo, 0, 1);
	onionFour.fade(startTime + tickTwo, endTime - tickTwo, 1, 1);
	onionFour.fade(endTime - tickTwo, endTime, 1, 1);
	onionFour.fade(endTime, endTime + tick, 1, 0);
	
	/*
	onionOne.scale(startTime, startTime, size, size);
	onionTwo.scale(startTime, startTime, size, size);
	onionThree.scale(startTime, startTime, size, size);
	onionFour.scale(startTime, startTime, size, size);
	*/
	
	onionOne.move(1, startTime, endTime, posX, posY + moveDown * (-1 * opposite), posX, posY);
	onionTwo.move(1, startTime, endTime, posX, posY + moveDown * (-1 * opposite), posX, posY);
	onionThree.move(1, startTime, endTime, posX, posY + moveDown * (-1 * opposite), posX, posY);
	onionFour.move(1, startTime, endTime, posX, posY + moveDown * (-1 * opposite), posX, posY);
	
	onionOne.rotate(startTime, endTime, 0, 10);
	onionTwo.rotate(startTime, endTime, 0, -8);
	onionThree.rotate(startTime, endTime, 0, 6);
	onionFour.rotate(startTime, endTime, 0, -4);
	
	onionOne.scaleVec(startTime+(tick*0), startTime+(tick*1),size,size,-size,size);
	onionOne.scaleVec(startTime+(tick*1), startTime+(tick*2),-size,size,size,size);
	onionOne.scaleVec(startTime+(tick*2), startTime+(tick*3),size,size,-size,size);
	onionOne.scaleVec(startTime+(tick*3), startTime+(tick*4),-size,size,size,size);
	onionOne.scaleVec(startTime+(tick*4), startTime+(tick*5),size,size,-size,size);
	onionOne.scaleVec(startTime+(tick*5), startTime+(tick*6),-size,size,size,size);
	
	onionTwo.scaleVec(startTime+(tickFour*0), startTime+(tickFour*1),size,size,-size,size);
	onionTwo.scaleVec(startTime+(tickFour*1), startTime+(tickFour*2),-size,size,size,size);
	onionTwo.scaleVec(startTime+(tickFour*2), startTime+(tickFour*3),size,size,-size,size);
	onionTwo.scaleVec(startTime+(tickFour*3), startTime+(tickFour*4),-size,size,size,size);
	
	onionThree.scaleVec(startTime+(tickThree*0), startTime+(tickThree*1),size,size,-size,size);
	onionThree.scaleVec(startTime+(tickThree*1), startTime+(tickThree*2),-size,size,size,size);
	onionThree.scaleVec(startTime+(tickThree*2), startTime+(tickThree*3),size,size,-size,size);

	onionFour.scaleVec(startTime+(tickTwo*0), startTime+(tickTwo*1),size,size,-size,size);
	onionFour.scaleVec(startTime+(tickTwo*1), startTime+(tickTwo*2),size,size,-size,size);
	
	var letterSize = 0.1;
	
	// A S P H Y X I A

	var charA1 = new Sprite("SB/Title/A.png");
	var charS = new Sprite("SB/Title/S.png");
	var charP = new Sprite("SB/Title/P.png");
	var charH = new Sprite("SB/Title/H.png");
	var charY = new Sprite("SB/Title/Y.png");
	var charX = new Sprite("SB/Title/X.png");
	var charI = new Sprite("SB/Title/I.png");
	var charA2 = new Sprite("SB/Title/A.png");
	
	charA1.scale(startTime+(tick*6),startTime+(tick*6), letterSize, letterSize);
	charS.scale(startTime+(tick*6),startTime+(tick*6), letterSize, letterSize);
	charP.scale(startTime+(tick*6),startTime+(tick*6), letterSize, letterSize);
	charH.scale(startTime+(tick*6),startTime+(tick*6), letterSize, letterSize);
	charY.scale(startTime+(tick*6),startTime+(tick*6), letterSize, letterSize);
	charX.scale(startTime+(tick*6),startTime+(tick*6), letterSize, letterSize);
	charI.scale(startTime+(tick*6),startTime+(tick*6), letterSize, letterSize);
	charA2.scale(startTime+(tick*6),startTime+(tick*6), letterSize, letterSize);
	
	charA1.color(0,0,0);
	charS.color(0,0,0);
	charP.color(0,0,0);
	charH.color(0,0,0);
	charY.color(0,0,0);
	charX.color(0,0,0);
	charI.color(0,0,0);
	charA2.color(0,0,0);
	
	charA1.move(startTime+(tick*6),startTime+(tick*8), posX, posY, posX - 35, posY);
	charS.move(startTime+(tick*6),startTime+(tick*8), posX, posY, posX - 25, posY);
	charP.move(startTime+(tick*6),startTime+(tick*8), posX, posY, posX - 15, posY);
	charH.move(startTime+(tick*6),startTime+(tick*8), posX, posY, posX - 5, posY);
	charY.move(startTime+(tick*6),startTime+(tick*8), posX, posY, posX + 5, posY);
	charX.move(startTime+(tick*6),startTime+(tick*8), posX, posY, posX + 15, posY);
	charI.move(startTime+(tick*6),startTime+(tick*8), posX, posY, posX + 24, posY);
	charA2.move(startTime+(tick*6),startTime+(tick*8), posX, posY, posX + 33, posY);
	
	charA1.fade(startTime+(tick*6),startTime+(tick*8),0, 1);
	charS.fade(startTime+(tick*6),startTime+(tick*8),0, 1);
	charP.fade(startTime+(tick*6),startTime+(tick*8),0, 1);
	charH.fade(startTime+(tick*6),startTime+(tick*8),0, 1);
	charY.fade(startTime+(tick*6),startTime+(tick*8),0, 1);
	charX.fade(startTime+(tick*6),startTime+(tick*8),0, 1);
	charI.fade(startTime+(tick*6),startTime+(tick*8),0, 1);
	charA2.fade(startTime+(tick*6),startTime+(tick*8),0, 1);
	
	charA1.fade(startTime + (tick*8), newEndTime - (tick*10), 1, 1);
	charA1.fade(newEndTime - (tick*10), newEndTime - (tick*9), 1, 0);
	charA1.fade(newEndTime - (tick*9),newEndTime - (tick*8), 0, 1);
	charA1.fade(newEndTime - (tick*8), newEndTime + (tick*2), 1, 1);
	charA1.fade(newEndTime + (tick*2), newEndTime + (tick*3), 1, 0);

	charS.fade(startTime + (tick*8), newEndTime - (tick*9), 1, 1);
	charS.fade(newEndTime - (tick*9), newEndTime - (tick*8), 1, 0);
	charS.fade(newEndTime - (tick*8), newEndTime - (tick*7), 0, 1);
	charS.fade(newEndTime - (tick*7), newEndTime + (tick*2), 1, 1);
	charS.fade(newEndTime + (tick*2), newEndTime + (tick*3), 1, 0);
	
	charP.fade(startTime + (tick*8), newEndTime - (tick*8), 1, 1);
	charP.fade(newEndTime - (tick*8), newEndTime - (tick*7), 1, 0);
	charP.fade(newEndTime - (tick*7), newEndTime - (tick*6), 0, 1);
	charP.fade(newEndTime - (tick*6), newEndTime + (tick*2), 1, 1);
	charP.fade(newEndTime + (tick*2), newEndTime + (tick*3), 1, 0);
	
	charH.fade(startTime + (tick*8), newEndTime - (tick*7), 1, 1);
	charH.fade(newEndTime - (tick*7), newEndTime - (tick*6), 1, 0);
	charH.fade(newEndTime - (tick*6), newEndTime - (tick*5), 0, 1);
	charH.fade(newEndTime - (tick*5), newEndTime + (tick*2), 1, 1);
	charH.fade(newEndTime + (tick*2), newEndTime + (tick*3), 1, 0);
	
	charY.fade(startTime + (tick*8), newEndTime - (tick*6), 1, 1);
	charY.fade(newEndTime - (tick*6), newEndTime - (tick*5), 1, 0);
	charY.fade(newEndTime - (tick*5), newEndTime - (tick*4), 0, 1);
	charY.fade(newEndTime - (tick*4), newEndTime + (tick*2), 1, 1);
	charY.fade(newEndTime + (tick*2), newEndTime + (tick*3), 1, 0);
	
	charX.fade(startTime + (tick*8), newEndTime - (tick*5), 1, 1);
	charX.fade(newEndTime - (tick*5), newEndTime - (tick*4), 1, 0);
	charX.fade(newEndTime - (tick*4), newEndTime - (tick*3), 0, 1);
	charX.fade(newEndTime - (tick*3), newEndTime + (tick*2), 1, 1);
	charX.fade(newEndTime + (tick*2), newEndTime + (tick*3), 1, 0);
	
	charI.fade(startTime + (tick*8), newEndTime - (tick*4), 1, 1);
	charI.fade(newEndTime - (tick*4), newEndTime - (tick*3), 1, 0);
	charI.fade(newEndTime - (tick*3),newEndTime - (tick*2), 0, 1);
	charI.fade(newEndTime - (tick*2), newEndTime + (tick*2), 1, 1);
	charI.fade(newEndTime + (tick*2), newEndTime + (tick*3), 1, 0);
	
	charA2.fade(startTime + (tick*8), newEndTime - (tick*3), 1, 1);
	charA2.fade(newEndTime - (tick*3), newEndTime - (tick*2), 1, 0);
	charA2.fade(newEndTime - (tick*2), newEndTime - (tick*1), 0, 1);
	charA2.fade(newEndTime - (tick*1), newEndTime + (tick*2), 1, 1);
	charA2.fade(newEndTime + (tick*2), newEndTime + (tick*3), 1, 0);
}
/*
asphyxia(661);
asphyxia(28232);
asphyxia(62192);
asphyxia(81684);
asphyxia(113511);
asphyxia(137725);
asphyxia(162242);
asphyxia(187674);
*/
function kevin(startTime){

	var endTime = startTime + 937;
	var size = 0.1;
	var moveDown = 50;
	
	var posX = 570 + 64;
	var posY = 340 + 55;
	
	var opposite = 0;

	var onionOne = new Sprite("SB/Onion Layer/Onion0.png");
	var onionTwo = new Sprite("SB/Onion Layer/Onion1.png");
	var onionThree = new Sprite("SB/Onion Layer/Onion2.png");
	var onionFour = new Sprite("SB/Onion Layer/Onion3.png");
	
	var tick = 156;
	var tickFour = 234; // go four times
	var tickThree = 312; //go three times
	var tickTwo = 468;
	
	/*
	onionOne.color(0,0,0);
	onionTwo.color(0,0,0);
	onionThree.color(0,0,0);
	onionFour.color(0,0,0);
	*/
	
	onionOne.fade(startTime, startTime + tickTwo, 0, 1);
	onionOne.fade(startTime + tickTwo, endTime - tickTwo, 1, 1);
	onionOne.fade(endTime - tickTwo, endTime, 1, 1);
	onionOne.fade(endTime, endTime + 1875, 1, 1);
	onionOne.fade(endTime + 1875, endTime + 1875 + tickTwo, 1, 0);
	onionOne.scaleVec(25, startTime+(tick*6),endTime + 937, size, size, 0.7, 0.7);
	
	var newEndTime = endTime + 1875;
	
	onionTwo.fade(startTime, startTime + tickTwo, 0, 1);
	onionTwo.fade(startTime + tickTwo, endTime - tickTwo, 1, 1);
	onionTwo.fade(endTime - tickTwo, endTime, 1, 1);
	onionTwo.fade(endTime, endTime + tick, 1, 0);
	
	onionThree.fade(startTime, startTime + tickTwo, 0, 1);
	onionThree.fade(startTime + tickTwo, endTime - tickTwo, 1, 1);
	onionThree.fade(endTime - tickTwo, endTime, 1, 1);
	onionThree.fade(endTime, endTime + tick, 1, 0);
	
	onionFour.fade(startTime, startTime + tickTwo, 0, 1);
	onionFour.fade(startTime + tickTwo, endTime - tickTwo, 1, 1);
	onionFour.fade(endTime - tickTwo, endTime, 1, 1);
	onionFour.fade(endTime, endTime + tick, 1, 0);
	
	/*
	onionOne.scale(startTime, startTime, size, size);
	onionTwo.scale(startTime, startTime, size, size);
	onionThree.scale(startTime, startTime, size, size);
	onionFour.scale(startTime, startTime, size, size);
	*/
	
	onionOne.move(1, startTime, endTime, posX, posY + moveDown * (-1 * opposite), posX, posY);
	onionTwo.move(1, startTime, endTime, posX, posY + moveDown * (-1 * opposite), posX, posY);
	onionThree.move(1, startTime, endTime, posX, posY + moveDown * (-1 * opposite), posX, posY);
	onionFour.move(1, startTime, endTime, posX, posY + moveDown * (-1 * opposite), posX, posY);
	
	onionOne.rotate(startTime, endTime, 0, 10);
	onionTwo.rotate(startTime, endTime, 0, -8);
	onionThree.rotate(startTime, endTime, 0, 6);
	onionFour.rotate(startTime, endTime, 0, -4);
	
	onionOne.scaleVec(startTime+(tick*0), startTime+(tick*1),size,size,-size,size);
	onionOne.scaleVec(startTime+(tick*1), startTime+(tick*2),-size,size,size,size);
	onionOne.scaleVec(startTime+(tick*2), startTime+(tick*3),size,size,-size,size);
	onionOne.scaleVec(startTime+(tick*3), startTime+(tick*4),-size,size,size,size);
	onionOne.scaleVec(startTime+(tick*4), startTime+(tick*5),size,size,-size,size);
	onionOne.scaleVec(startTime+(tick*5), startTime+(tick*6),-size,size,size,size);
	
	onionTwo.scaleVec(startTime+(tickFour*0), startTime+(tickFour*1),size,size,-size,size);
	onionTwo.scaleVec(startTime+(tickFour*1), startTime+(tickFour*2),-size,size,size,size);
	onionTwo.scaleVec(startTime+(tickFour*2), startTime+(tickFour*3),size,size,-size,size);
	onionTwo.scaleVec(startTime+(tickFour*3), startTime+(tickFour*4),-size,size,size,size);
	
	onionThree.scaleVec(startTime+(tickThree*0), startTime+(tickThree*1),size,size,-size,size);
	onionThree.scaleVec(startTime+(tickThree*1), startTime+(tickThree*2),-size,size,size,size);
	onionThree.scaleVec(startTime+(tickThree*2), startTime+(tickThree*3),size,size,-size,size);

	onionFour.scaleVec(startTime+(tickTwo*0), startTime+(tickTwo*1),size,size,-size,size);
	onionFour.scaleVec(startTime+(tickTwo*1), startTime+(tickTwo*2),size,size,-size,size);
	
	var letterSize = 0.1;

	var charDash1 = new Sprite("SB/Title/DASH.png");
	var charK = new Sprite("SB/Title/K.png");
	var charE1 = new Sprite("SB/Title/E.png");
	var charV = new Sprite("SB/Title/V.png");
	var charI = new Sprite("SB/Title/I.png");
	var charN = new Sprite("SB/Title/N.png");
	var charC = new Sprite("SB/Title/C.png");
	var charE2 = new Sprite("SB/Title/E.png");
	var charL = new Sprite("SB/Title/L.png");
	var charA = new Sprite("SB/Title/A.png");
	var charDash2 = new Sprite("SB/Title/DASH.png");
	
	charDash1.scale(startTime+(tick*6),startTime+(tick*6), letterSize, letterSize);
	charK.scale(startTime+(tick*6),startTime+(tick*6), letterSize, letterSize);
	charE1.scale(startTime+(tick*6),startTime+(tick*6), letterSize, letterSize);
	charV.scale(startTime+(tick*6),startTime+(tick*6), letterSize, letterSize);
	charI.scale(startTime+(tick*6),startTime+(tick*6), letterSize, letterSize);
	charN.scale(startTime+(tick*6),startTime+(tick*6), letterSize, letterSize);
	charC.scale(startTime+(tick*6),startTime+(tick*6), letterSize, letterSize);
	charE2.scale(startTime+(tick*6),startTime+(tick*6), letterSize, letterSize);
	charL.scale(startTime+(tick*6),startTime+(tick*6), letterSize, letterSize);
	charA.scale(startTime+(tick*6),startTime+(tick*6), letterSize, letterSize);
	charDash2.scale(startTime+(tick*6),startTime+(tick*6), letterSize, letterSize);
	
	charDash1.color(0,0,0);
	charK.color(0,0,0);
	charE1.color(0,0,0);
	charV.color(0,0,0);
	charI.color(0,0,0);
	charN.color(0,0,0);
	charC.color(0,0,0);
	charE2.color(0,0,0);
	charL.color(0,0,0);
	charA.color(0,0,0);
	charDash2.color(0,0,0);
	
	charDash1.move(startTime+(tick*6),startTime+(tick*8), posX, posY, posX - 50, posY);
	charK.move(startTime+(tick*6),startTime+(tick*8), posX, posY, posX - 40, posY);
	charE1.move(startTime+(tick*6),startTime+(tick*8), posX, posY, posX - 30, posY);
	charV.move(startTime+(tick*6),startTime+(tick*8), posX, posY, posX - 19, posY);
	charI.move(startTime+(tick*6),startTime+(tick*8), posX, posY, posX - 11, posY);
	charN.move(startTime+(tick*6),startTime+(tick*8), posX, posY, posX - 2, posY);
	charC.move(startTime+(tick*6),startTime+(tick*8), posX, posY, posX + 10, posY);
	charE2.move(startTime+(tick*6),startTime+(tick*8), posX, posY, posX + 20, posY);
	charL.move(startTime+(tick*6),startTime+(tick*8), posX, posY, posX + 30, posY);
	charA.move(startTime+(tick*6),startTime+(tick*8), posX, posY, posX + 40, posY);
	charDash2.move(startTime+(tick*6),startTime+(tick*8), posX, posY, posX + 50, posY);
	
	charDash1.fade(startTime+(tick*6),startTime+(tick*8),0, 1);
	charK.fade(startTime+(tick*6),startTime+(tick*8),0, 1);
	charE1.fade(startTime+(tick*6),startTime+(tick*8),0, 1);
	charV.fade(startTime+(tick*6),startTime+(tick*8),0, 1);
	charI.fade(startTime+(tick*6),startTime+(tick*8),0, 1);
	charN.fade(startTime+(tick*6),startTime+(tick*8),0, 1);
	charC.fade(startTime+(tick*6),startTime+(tick*8),0, 1);
	charE2.fade(startTime+(tick*6),startTime+(tick*8),0, 1);
	charL.fade(startTime+(tick*6),startTime+(tick*8),0, 1);
	charA.fade(startTime+(tick*6),startTime+(tick*8),0, 1);
	charDash2.fade(startTime+(tick*6),startTime+(tick*8),0, 1);
	
	charDash1.fade(startTime + (tick*8), newEndTime - (tick*10), 1, 1);
	charDash1.fade(newEndTime - (tick*10), newEndTime - (tick*9), 1, 0);
	charDash1.fade(newEndTime - (tick*9),newEndTime - (tick*8), 0, 1);
	charDash1.fade(newEndTime - (tick*8), newEndTime + (tick*2), 1, 1);
	charDash1.fade(newEndTime + (tick*2), newEndTime + (tick*3), 1, 0);

	charK.fade(startTime + (tick*8), newEndTime - (tick*9), 1, 1);
	charK.fade(newEndTime - (tick*9), newEndTime - (tick*8), 1, 0);
	charK.fade(newEndTime - (tick*8), newEndTime - (tick*7), 0, 1);
	charK.fade(newEndTime - (tick*7), newEndTime + (tick*2), 1, 1);
	charK.fade(newEndTime + (tick*2), newEndTime + (tick*3), 1, 0);
	
	charE1.fade(startTime + (tick*8), newEndTime - (tick*8), 1, 1);
	charE1.fade(newEndTime - (tick*8), newEndTime - (tick*7), 1, 0);
	charE1.fade(newEndTime - (tick*7), newEndTime - (tick*6), 0, 1);
	charE1.fade(newEndTime - (tick*6), newEndTime + (tick*2), 1, 1);
	charE1.fade(newEndTime + (tick*2), newEndTime + (tick*3), 1, 0);
	
	charV.fade(startTime + (tick*8), newEndTime - (tick*7), 1, 1);
	charV.fade(newEndTime - (tick*7), newEndTime - (tick*6), 1, 0);
	charV.fade(newEndTime - (tick*6), newEndTime - (tick*5), 0, 1);
	charV.fade(newEndTime - (tick*5), newEndTime + (tick*2), 1, 1);
	charV.fade(newEndTime + (tick*2), newEndTime + (tick*3), 1, 0);
	
	charI.fade(startTime + (tick*8), newEndTime - (tick*6), 1, 1);
	charI.fade(newEndTime - (tick*6), newEndTime - (tick*5), 1, 0);
	charI.fade(newEndTime - (tick*5), newEndTime - (tick*4), 0, 1);
	charI.fade(newEndTime - (tick*4), newEndTime + (tick*2), 1, 1);
	charI.fade(newEndTime + (tick*2), newEndTime + (tick*3), 1, 0);
	
	charN.fade(startTime + (tick*8), newEndTime - (tick*5), 1, 1);
	charN.fade(newEndTime - (tick*5), newEndTime - (tick*4), 1, 0);
	charN.fade(newEndTime - (tick*4), newEndTime - (tick*3), 0, 1);
	charN.fade(newEndTime - (tick*3), newEndTime + (tick*2), 1, 1);
	charN.fade(newEndTime + (tick*2), newEndTime + (tick*3), 1, 0);
	
	charC.fade(startTime + (tick*8), newEndTime - (tick*4), 1, 1);
	charC.fade(newEndTime - (tick*4), newEndTime - (tick*3), 1, 0);
	charC.fade(newEndTime - (tick*3),newEndTime - (tick*2), 0, 1);
	charC.fade(newEndTime - (tick*2), newEndTime + (tick*2), 1, 1);
	charC.fade(newEndTime + (tick*2), newEndTime + (tick*3), 1, 0);
	
	charE2.fade(startTime + (tick*8), newEndTime - (tick*3), 1, 1);
	charE2.fade(newEndTime - (tick*3), newEndTime - (tick*2), 1, 0);
	charE2.fade(newEndTime - (tick*2), newEndTime - (tick*1), 0, 1);
	charE2.fade(newEndTime - (tick*1), newEndTime + (tick*2), 1, 1);
	charE2.fade(newEndTime + (tick*2), newEndTime + (tick*3), 1, 0);
	
	charL.fade(startTime + (tick*8), newEndTime - (tick*2), 1, 1);
	charL.fade(newEndTime - (tick*2), newEndTime - (tick*1), 1, 0);
	charL.fade(newEndTime - (tick*1), newEndTime, 0, 1);
	charL.fade(newEndTime, newEndTime + (tick*2), 1, 1);
	charL.fade(newEndTime + (tick*2), newEndTime + (tick*3), 1, 0);
	
	charA.fade(startTime + (tick*8), newEndTime - (tick*1), 1, 1);
	charA.fade(newEndTime - (tick*1), newEndTime, 1, 0);
	charA.fade(newEndTime, newEndTime + (tick*1), 0, 1);
	charA.fade(newEndTime + (tick*1), newEndTime + (tick*2), 1, 1);
	charA.fade(newEndTime + (tick*2), newEndTime + (tick*3), 1, 0);
	
	charDash2.fade(startTime + (tick*8), newEndTime, 1, 1);
	charDash2.fade(newEndTime, newEndTime + (tick*1), 1, 0);
	charDash2.fade(newEndTime + (tick*1), newEndTime + (tick*2), 0, 1);
	charDash2.fade(newEndTime + (tick*2), newEndTime + (tick*3), 1, 0);
	
	/*
	charDash1
	charK
	charE1
	charV
	charI
	charN
	charC
	charE2
	charL
	charA
	charDash2
	*/
	
}
/*
kevin(8587);
kevin(47725);
kevin(71938);
kevin(104019);
kevin(127978);
kevin(147471);
kevin(177928);
kevin(202293);
*/

function randomStuff(startTime, angle, dist){
	var centreX = 256 + 64;
	var centreY = 192 + 55; 
	var length = 12;
	var thickness = 0.1;
	var thicknessAdd = 0.7;
	
	//Time piece
	var fullBar = 1218;
	var halfBar = 609;
	var quartBar = 304;
	
	var angleSet = angle;
	var distance = dist;
	var awayDist = 750; //dist * 2.5
	
	//Angle
	var nintyDeg = 1.5708;
	var thirtyDeg = 0.523599;
	
	//Easing
	var fadeIn = 0;
	var fadeOut = 2;
	var scaleVecEase = 3;
	
	var line1 = new Sprite("SB/square.jpg");
	var line2 = new Sprite("SB/square.jpg");
	var line3 = new Sprite("SB/square.jpg");
	var line4 = new Sprite("SB/square.jpg");

	line1.fade(fadeIn, startTime - quartBar, startTime + quartBar, 0, 1);
	line2.fade(fadeIn, startTime - quartBar, startTime + quartBar, 0, 1);
	line3.fade(fadeIn, startTime - quartBar, startTime + quartBar, 0, 1);
	line4.fade(fadeIn, startTime - quartBar, startTime + quartBar, 0, 1);
	
	
	line1.scaleVec(fadeOut, startTime - quartBar, startTime + fullBar, thickness, length, thickness + thicknessAdd, length);
	line2.scaleVec(fadeOut, startTime - quartBar, startTime + fullBar, thickness, length, thickness + thicknessAdd, length);
	line3.scaleVec(fadeOut, startTime - quartBar, startTime + fullBar, thickness, length, thickness + thicknessAdd, length);
	line4.scaleVec(fadeOut, startTime - quartBar, startTime + fullBar, thickness, length, thickness + thicknessAdd, length);

	line1.move(scaleVecEase, startTime - quartBar, startTime + fullBar, (distance * (sin(angleSet))) + centreX, (distance * (cos(angleSet))) + centreY, ((distance + awayDist) * (sin(angleSet))) + centreX, ((distance + awayDist) * (cos(angleSet))) + centreY);
	line2.move(scaleVecEase, startTime - quartBar, startTime + fullBar, (distance * -(sin(angleSet))) + centreX, (distance * -(cos(angleSet))) + centreY, ((distance + awayDist) * -(sin(angleSet))) + centreX, ((distance + awayDist) * -(cos(angleSet))) + centreY);
	line3.move(scaleVecEase, startTime - quartBar, startTime + fullBar, (distance * (sin(angleSet+nintyDeg))) + centreX, (distance * (cos(angleSet+nintyDeg))) + centreY, ((distance + awayDist) * (sin(angleSet+nintyDeg))) + centreX, ((distance + awayDist) * (cos(angleSet+nintyDeg))) + centreY);
	line4.move(scaleVecEase, startTime - quartBar, startTime + fullBar, (distance * -(sin(angleSet+nintyDeg))) + centreX, (distance * -(cos(angleSet+nintyDeg))) + centreY, ((distance + awayDist) * -(sin(angleSet+nintyDeg))) + centreX, ((distance + awayDist) * -(cos(angleSet+nintyDeg))) + centreY);

	line1.rotate(startTime - quartBar, startTime + fullBar, (angleSet + thirtyDeg) - nintyDeg, angleSet - nintyDeg);
	line2.rotate(startTime - quartBar, startTime + fullBar, (angleSet + thirtyDeg) - nintyDeg, angleSet - nintyDeg);
	line3.rotate(startTime - quartBar, startTime + fullBar, (angleSet + thirtyDeg), angleSet);
	line4.rotate(startTime - quartBar, startTime + fullBar, (angleSet + thirtyDeg), angleSet);

	
	line1.fade(fadeOut, startTime + halfBar, startTime + (halfBar * 2), 1, 0);
	line2.fade(fadeOut, startTime + halfBar, startTime + (halfBar * 2), 1, 0);
	line3.fade(fadeOut, startTime + halfBar, startTime + (halfBar * 2), 1, 0);
	line4.fade(fadeOut, startTime + halfBar, startTime + (halfBar * 2), 1, 0);
	
}
/*
var counterThingy = 12.66;
for(var i = 94019; i < 103461; i++){
	randomStuff(i, counterThingy,(60));
	randomStuff(i + 304, counterThingy,(60));
	if(counterThingy > 1.19){
		randomStuff(i + 609, counterThingy,(60));
		randomStuff(i + 913, counterThingy,(60));
	}
	counterThingy = counterThingy - 1.64;
	i = i + 1217;
	println(counterThingy);
}
*/

//enterDimension(94019, 102851);

function enterDimension(startTime, endTime){
	var centreX = 256 + 64;
	var centreY = 192 + 55;
	var length = 8;
	var thickness = 0.1;
	var bar = 1218;
	var initRad = 60;
	var pi = 3.1415926;
	var spin = 0;
	var lineOneRad = 80;
	var lineTwoRad = -80;
	var addSpin = ((pi/2)/32); //0.049087
	var endFor = 0;
	var halfBar = 304;
	var rotationOne = 0;
	var rotationTwo = 0;
	var thicknessAdd = 0.3;
	var radAdd = 2;
	
	//vertical
	for(var duration = startTime; duration < endTime; duration++){
		var line1 = new Sprite("SB/square.jpg");
		var line2 = new Sprite("SB/square.jpg");
		line1.scaleVec(startTime, startTime, thickness, length, thickness, length);
		line2.scaleVec(startTime, startTime, thickness, length, thickness, length);
		
		endFor = duration + bar;
//		rotationOne = spin;
//		rotationTwo = spin;
		lineOneRad = 300;
		lineTwoRad = -300;
		for(var tempDur = duration; tempDur < endFor; tempDur ++){
			line1.move(tempDur, tempDur + 37, (lineOneRad * sin(spin)) + centreX, (lineOneRad * cos(spin)) + centreY, ((lineOneRad + radAdd) * sin(spin + addSpin)) + centreX, ((lineOneRad + radAdd) * cos(spin + addSpin)) + centreY);
//			line1.rotate(tempDur, tempDur + 37, rotationOne, rotationOne - (addSpin*2));
			line2.move(tempDur, tempDur + 37, (lineTwoRad * sin(spin)) + centreX, (lineTwoRad * cos(spin)) + centreY, ((lineTwoRad + radAdd) * sin(spin + addSpin)) + centreX, ((lineTwoRad + radAdd) * cos(spin + addSpin)) + centreY);
//			line2.rotate(tempDur, tempDur + 37, rotationTwo, rotationTwo - (addSpin*2));
			spin = spin + addSpin;
//			rotationOne = rotationOne - (addSpin*2);
//			rotationTwo = rotationTwo - (addSpin*2);
			tempDur = tempDur + 37.0625; //38.0625
			lineOneRad = lineOneRad + radAdd;
			lineTwoRad = lineTwoRad + radAdd;
		}
		line1.rotate(duration, duration + 1218, 0, -pi/4);
		line1.fade(duration, duration + halfBar, 0, 1);
		line1.fade(duration + halfBar, duration + 1218, 1, 0); 
		line1.scaleVec(duration, duration + 1218, thickness, length, thickness + 0.3, length);
		line2.fade(duration, duration + halfBar, 0, 1);
		line2.fade(duration + halfBar, duration + 1218, 1, 0); 
		line2.scaleVec(duration, duration + 1218, thickness, length, thickness + 0.3, length);
		
		duration = duration + 1217; //1218
	}
	
}

//enterDimension(94019, 102851);

function enter1(startTime, endTime){
	var centreX = 256 + 64;		// ------------------- FINAL
	var centreY = 192 + 55;		// ------------------- FINAL
	var fourthBar = 76; 		// ------------------- FINAL
	var radi = 80;				// radius of startPoint (not final)
	var radiOUT = radi * 2;
	var spin = 0;				// not final
	var addSpin = 0.08;			// ------------------- FINAL
	var length = 4;				// ------------------- FINAL
	var thickness = 0.1;		// ------------------- FINAL
	var oneBar = 1218;			// ------------------- FINAL
	var entAngle = 0;			// not final
	var addEntAngle = 1.36;		// not final
	var halfPi = 3.1415925 / 2;	// ------------------- FINAL
	var radi2 = -80;			// not final
	var radi2OUT = radi2 * 2;
	var addDistance = 20;		// ------------------- FINAL
	var increaseSize = 4;		// ------------------- FINAL
	var pi = 3.1415925;
	var counter = 0;
	
	
	for(var i=startTime; i<endTime; i++){
	if(counter == 0 || counter == 1){
	var line1 = new Sprite("SB/square.jpg");
	var line2 = new Sprite("SB/square.jpg");
	var line3 = new Sprite("SB/square.jpg");
	var line4 = new Sprite("SB/square.jpg");
/*	var line5 = new Sprite("SB/square.jpg");
	var line6 = new Sprite("SB/square.jpg");
	var line7 = new Sprite("SB/square.jpg");
	var line8 = new Sprite("SB/square.jpg");
*/
	line1.fade(2, i, i + (oneBar / 2), 0 , 1);
	line2.fade(2, i, i + (oneBar / 2), 0 , 1);
	line3.fade(2, i, i + (oneBar / 2), 0 , 1);
	line4.fade(2, i, i + (oneBar / 2), 0 , 1);
/*	line5.fade(2, i, i + (oneBar / 2), 0 , 1);
	line6.fade(2, i, i + (oneBar / 2), 0 , 1);
	line7.fade(2, i, i + (oneBar / 2), 0 , 1);
	line8.fade(2, i, i + (oneBar / 2), 0 , 1);
*/	

	for(var tempStart = i; tempStart < i + oneBar; tempStart++){
//	println("spin "+spin);
	
	if(counter == 1){
		line1.move(tempStart, tempStart + fourthBar, (radi * sin(spin)) + centreX, (radi * cos(spin)) + centreY,((radi+addDistance) * sin(spin+addSpin)) + centreX, ((radi+addDistance) * cos(spin+addSpin)) + centreY);
		line2.move(tempStart, tempStart + fourthBar, (radi2 * sin(spin)) + centreX, (radi2 * cos(spin)) + centreY,((radi2+addDistance) * sin(spin+addSpin)) + centreX, ((radi2+addDistance) * cos(spin+addSpin)) + centreY);
		line3.move(tempStart, tempStart + fourthBar, (radi * sin(spin+halfPi)) + centreX, (radi * cos(spin+halfPi)) + centreY,((radi+addDistance) * sin(spin+addSpin+halfPi)) + centreX, ((radi+addDistance) * cos(spin+addSpin+halfPi)) + centreY);
		line4.move(tempStart, tempStart + fourthBar, (radi2 * sin(spin+halfPi)) + centreX, (radi2 * cos(spin+halfPi)) + centreY,((radi2+addDistance) * sin(spin+addSpin+halfPi)) + centreX, ((radi2+addDistance) * cos(spin+addSpin+halfPi)) + centreY);
/*		line5.move(tempStart, tempStart + fourthBar, (radiOUT * sin(spin)) + centreX, (radiOUT * cos(spin)) + centreY,((radiOUT+addDistance) * sin(spin+addSpin)) + centreX, ((radiOUT+addDistance) * cos(spin+addSpin)) + centreY);
		line6.move(tempStart, tempStart + fourthBar, (radi2OUT * sin(spin)) + centreX, (radi2OUT * cos(spin)) + centreY,((radi2OUT-addDistance) * sin(spin+addSpin)) + centreX, ((radi2OUT-addDistance) * cos(spin+addSpin)) + centreY);
		line7.move(tempStart, tempStart + fourthBar, (radiOUT * sin(spin+halfPi)) + centreX, (radiOUT * cos(spin+halfPi)) + centreY,((radiOUT+addDistance) * sin(spin+addSpin+halfPi)) + centreX, ((radiOUT+addDistance) * cos(spin+addSpin+halfPi)) + centreY);
		line8.move(tempStart, tempStart + fourthBar, (radi2OUT * sin(spin+halfPi)) + centreX, (radi2OUT * cos(spin+halfPi)) + centreY,((radi2OUT-addDistance) * sin(spin+addSpin+halfPi)) + centreX, ((radi2OUT-addDistance) * cos(spin+addSpin+halfPi)) + centreY);
*/
	}
	
	if(counter == 0){
		line1.move(tempStart, tempStart + fourthBar, (radi * sin(spin)) + centreX, (radi * cos(spin)) + centreY,((radi+addDistance) * sin(spin+addSpin)) + centreX, ((radi+addDistance) * cos(spin+addSpin)) + centreY);
		line2.move(tempStart, tempStart + fourthBar, (radi2 * sin(spin)) + centreX, (radi2 * cos(spin)) + centreY,((radi2+addDistance) * sin(spin+addSpin)) + centreX, ((radi2+addDistance) * cos(spin+addSpin)) + centreY);
		line3.move(tempStart, tempStart + fourthBar, (radi * sin(spin+halfPi)) + centreX, (radi * cos(spin+halfPi)) + centreY,((radi+addDistance) * sin(spin+addSpin+halfPi)) + centreX, ((radi+addDistance) * cos(spin+addSpin+halfPi)) + centreY);
		line4.move(tempStart, tempStart + fourthBar, (radi2 * sin(spin+halfPi)) + centreX, (radi2 * cos(spin+halfPi)) + centreY,((radi2+addDistance) * sin(spin+addSpin+halfPi)) + centreX, ((radi2+addDistance) * cos(spin+addSpin+halfPi)) + centreY);
/*		line5.move(tempStart, tempStart + fourthBar, (radiOUT * sin(spin)) + centreX, (radiOUT * cos(spin)) + centreY,((radiOUT+addDistance) * sin(spin+addSpin)) + centreX, ((radiOUT+addDistance) * cos(spin+addSpin)) + centreY);
		line6.move(tempStart, tempStart + fourthBar, (radi2OUT * sin(spin)) + centreX, (radi2OUT * cos(spin)) + centreY,((radi2OUT-addDistance) * sin(spin+addSpin)) + centreX, ((radi2OUT-addDistance) * cos(spin+addSpin)) + centreY);
		line7.move(tempStart, tempStart + fourthBar, (radiOUT * sin(spin+halfPi)) + centreX, (radiOUT * cos(spin+halfPi)) + centreY,((radiOUT+addDistance) * sin(spin+addSpin+halfPi)) + centreX, ((radiOUT+addDistance) * cos(spin+addSpin+halfPi)) + centreY);
		line8.move(tempStart, tempStart + fourthBar, (radi2OUT * sin(spin+halfPi)) + centreX, (radi2OUT * cos(spin+halfPi)) + centreY,((radi2OUT-addDistance) * sin(spin+addSpin+halfPi)) + centreX, ((radi2OUT-addDistance) * cos(spin+addSpin+halfPi)) + centreY);
*/
	}
	
		radi = radi + addDistance;
		radiOUT = radi + addDistance;
		radi2 = radi2 + addDistance;
		radi2OUT = radi2OUT  + addDistance;
		tempStart = tempStart + (fourthBar - 1);
		spin = spin + addSpin;
		
	}
	
//	println("spin "+spin);
//	println("entAngle "+entAngle);
	radi = 80;
	radi2 = 160;
	radiOUT = -80;
	radi2OUT = -160;
	
	counter++;
	
	line1.rotate(i, i + oneBar + fourthBar, entAngle + halfPi, entAngle - addEntAngle + halfPi);
	line1.scale(i, i + oneBar + fourthBar, 0.2, 0.2);
//	line1.scaleVec(i, i + oneBar + fourthBar, thickness, length, thickness * increaseSize, length * increaseSize);
	line2.rotate(i, i + oneBar + fourthBar, entAngle + halfPi, entAngle - addEntAngle + halfPi);
	line2.scale(i, i + oneBar + fourthBar, 0.2, 0.2);
//	line2.scaleVec(i, i + oneBar + fourthBar, thickness, length, thickness * increaseSize, length * increaseSize);
	line3.rotate(i, i + oneBar + fourthBar, entAngle, entAngle - addEntAngle);
	line3.scale(i, i + oneBar + fourthBar, 0.2, 0.2);
//	line3.scaleVec(i, i + oneBar + fourthBar, thickness, length, thickness * increaseSize, length * increaseSize);
	line4.rotate(i, i + oneBar + fourthBar, entAngle, entAngle - addEntAngle);
	line4.scale(i, i + oneBar + fourthBar, 0.2, 0.2);
//	line4.scaleVec(i, i + oneBar + fourthBar, thickness, length, thickness * increaseSize, length * increaseSize);
	/*
	line5.rotate(i, i + oneBar + fourthBar, entAngle + halfPi, entAngle - addEntAngle + halfPi);
	line5.scaleVec(i, i + oneBar + fourthBar, thickness, length, thickness * increaseSize, length * increaseSize);
	line6.rotate(i, i + oneBar + fourthBar, entAngle + halfPi, entAngle - addEntAngle + halfPi);
	line6.scaleVec(i, i + oneBar + fourthBar, thickness, length, thickness * increaseSize, length * increaseSize);
	line7.rotate(i, i + oneBar + fourthBar, entAngle, entAngle - addEntAngle);
	line7.scaleVec(i, i + oneBar + fourthBar, thickness, length, thickness * increaseSize, length * increaseSize);
	line8.rotate(i, i + oneBar + fourthBar, entAngle, entAngle - addEntAngle);
	line8.scaleVec(i, i + oneBar + fourthBar, thickness, length, thickness * increaseSize, length * increaseSize);
	*/
	line1.fade(1, i + (oneBar / 2), i + (oneBar), 1 , 0);
	line2.fade(1, i + (oneBar / 2), i + (oneBar), 1 , 0);
	line3.fade(1, i + (oneBar / 2), i + (oneBar), 1 , 0);
	line4.fade(1, i + (oneBar / 2), i + (oneBar), 1 , 0);
	
	/*
	line5.fade(1, i + (oneBar / 2), i + (oneBar), 1 , 0);
	line6.fade(1, i + (oneBar / 2), i + (oneBar), 1 , 0);
	line7.fade(1, i + (oneBar / 2), i + (oneBar), 1 , 0);
	line8.fade(1, i + (oneBar / 2), i + (oneBar), 1 , 0);
	*/
	
	entAngle = entAngle -addEntAngle;
	i = i + oneBar;
	}
	}
}

function dimension(startTime, endTime){
var oneBar = 1218;
var halfBar = oneBar / 2;
enter1(startTime, endTime);
// enter1(startTime + halfBar, endTime - halfBar);
}

//dimension(94019, 102851);

function windowPanel(startTime){
	var halfBar = 304;
	var quaterBar = halfBar / 2;
	var thickness = 0.1;
	var length = 8;
	
	// horizontal bar
	for(var abc = 100; abc <= 400; abc++){
		var lines = new Sprite("SB/square.jpg");
		lines.move(startTime, startTime, 320, abc, 320, abc);
		lines.scaleVec(startTime, startTime, length, thickness, length, thickness);
		lines.fade(startTime, startTime + halfBar, 0, 1);
		lines.fade(startTime + halfBar, startTime + (halfBar * 3), 1, 1);
		lines.fade(startTime + (halfBar * 3), startTime + (halfBar * 3) + quaterBar, 1, 0);
		abc = abc + 99;
	}
	
	for(var lel = 54.78; lel <= 756; lel++){
		var lines = new Sprite("SB/square.jpg");
		lines.move(startTime, startTime, lel, 247, lel, 247);
		lines.scaleVec(startTime, startTime, thickness, length, thickness, length);
		lines.fade(startTime, startTime + halfBar, 0, 1);
		lines.fade(startTime + halfBar, startTime + (halfBar * 3), 1, 1);
		lines.fade(startTime + (halfBar * 3), startTime + (halfBar * 3) + quaterBar, 1, 0);
		lel = lel + 176.78;
	}
	var tileSize = 0.22;
	var endDur = 76;
	var startDur = endDur / 2;
	
	var x1 = -34;
	var x2 = 144;
	var x3 = 321;
	var x4 = 499;
	var x5 = 677;
	var y1 = 52;
	var y2 = 152;
	var y3 = 252;
	var y4 = 352;
	var y5 = 452;
	
	
	var tileOne = new Sprite("SB/White.jpg");
	var tileTwo = new Sprite("SB/White.jpg");
	var tileThree = new Sprite("SB/White.jpg");
		tileOne.scale(startTime, startTime, tileSize, tileSize);
		tileTwo.scale(startTime, startTime, tileSize, tileSize);
		tileThree.scale(startTime, startTime, tileSize, tileSize);
		
		tileOne.move(startTime, startTime, 677, 52, 677, 52);
		tileOne.fade(startTime, startTime + startDur, 0, 1);
		tileOne.fade(startTime + startDur, startTime + startDur + endDur, 1, 0);
		
		tileTwo.move(startTime + (startDur * 1), startTime + (startDur * 1), 677, 152, 677, 152);
		tileTwo.fade(startTime + (startDur * 1), startTime + (startDur * 2), 0, 1);
		tileTwo.fade(startTime + (startDur * 2), startTime + (startDur * 2) + endDur, 1, 0);
		
		tileThree.move(startTime + (startDur * 3), startTime + (startDur * 3), x5, y3, x5, y3);
		tileThree.fade(startTime + (startDur * 3), startTime + (startDur * 4), 0, 1);
		tileThree.fade(startTime + (startDur * 4), startTime + (startDur * 4) + endDur, 1, 0);
		
		tileOne.move(startTime + (startDur * 4), startTime + (startDur * 4), x5, y4, x5, y4);
		tileOne.fade(startTime + (startDur * 4), startTime + (startDur * 5), 0, 1);
		tileOne.fade(startTime + (startDur * 5), startTime + (startDur * 5) + endDur, 1, 0);

		tileTwo.move(startTime + (startDur * 5), startTime + (startDur * 5), x5, y5, x5, y5);
		tileTwo.fade(startTime + (startDur * 5), startTime + (startDur * 6), 0, 1);
		tileTwo.fade(startTime + (startDur * 6), startTime + (startDur * 6) + endDur, 1, 0);
		
		tileThree.move(startTime + (startDur * 6), startTime + (startDur * 6), x4, y5, x4, y5);
		tileThree.fade(startTime + (startDur * 6), startTime + (startDur * 7), 0, 1);
		tileThree.fade(startTime + (startDur * 7), startTime + (startDur * 7) + endDur, 1, 0);
		
		tileOne.move(startTime + (startDur * 7), startTime + (startDur * 7), x3, y5, x3, y5);
		tileOne.fade(startTime + (startDur * 7), startTime + (startDur * 8), 0, 1);
		tileOne.fade(startTime + (startDur * 8), startTime + (startDur * 8) + endDur, 1, 0);
		
		tileTwo.move(startTime + (startDur * 8), startTime + (startDur * 8), x2, y5, x2, y5);
		tileTwo.fade(startTime + (startDur * 8), startTime + (startDur * 9), 0, 1);
		tileTwo.fade(startTime + (startDur * 9), startTime + (startDur * 9) + endDur, 1, 0);
		
		tileThree.move(startTime + (startDur * 9), startTime + (startDur * 9), x1, y5, x1, y5);
		tileThree.fade(startTime + (startDur * 9), startTime + (startDur * 10), 0, 1);
		tileThree.fade(startTime + (startDur * 10), startTime + (startDur * 10) + endDur, 1, 0);
		
		tileOne.move(startTime + (startDur * 10), startTime + (startDur * 10), x1, y4, x1, y4);
		tileOne.fade(startTime + (startDur * 10), startTime + (startDur * 11), 0, 1);
		tileOne.fade(startTime + (startDur * 11), startTime + (startDur * 11) + endDur, 1, 0);
		
		tileTwo.move(startTime + (startDur * 11), startTime + (startDur * 11), x1, y3, x1, y3);
		tileTwo.fade(startTime + (startDur * 11), startTime + (startDur * 12), 0, 1);
		tileTwo.fade(startTime + (startDur * 12), startTime + (startDur * 12) + endDur, 1, 0);
		
		tileThree.move(startTime + (startDur * 12), startTime + (startDur * 12), x1, y2, x1, y2);
		tileThree.fade(startTime + (startDur * 12), startTime + (startDur * 13), 0, 1);
		tileThree.fade(startTime + (startDur * 13), startTime + (startDur * 13) + endDur, 1, 0);
		
		tileOne.move(startTime + (startDur * 13), startTime + (startDur * 13), x1, y1, x1, y1);
		tileOne.fade(startTime + (startDur * 13), startTime + (startDur * 14), 0, 1);
		tileOne.fade(startTime + (startDur * 14), startTime + (startDur * 14) + endDur, 1, 0);
		
		tileTwo.move(startTime + (startDur * 14), startTime + (startDur * 14), x2, y1, x2, y1);
		tileTwo.fade(startTime + (startDur * 14), startTime + (startDur * 15), 0, 1);
		tileTwo.fade(startTime + (startDur * 15), startTime + (startDur * 15) + endDur, 1, 0);
		
		tileThree.move(startTime + (startDur * 15), startTime + (startDur * 15), x3, y1, x3, y1);
		tileThree.fade(startTime + (startDur * 15), startTime + (startDur * 16), 0, 1);
		tileThree.fade(startTime + (startDur * 16), startTime + (startDur * 16) + endDur, 1, 0);
		
		tileOne.move(startTime + (startDur * 16), startTime + (startDur * 16), x4, y1, x4, y1);
		tileOne.fade(startTime + (startDur * 16), startTime + (startDur * 17), 0, 1);
		tileOne.fade(startTime + (startDur * 17), startTime + (startDur * 17) + endDur, 1, 0);
		
		tileTwo.move(startTime + (startDur * 17), startTime + (startDur * 17), x4, y2, x4, y2);
		tileTwo.fade(startTime + (startDur * 17), startTime + (startDur * 18), 0, 1);
		tileTwo.fade(startTime + (startDur * 18), startTime + (startDur * 18) + endDur, 1, 0);
		
		tileThree.move(startTime + (startDur * 18), startTime + (startDur * 18), x4, y3, x4, y3);
		tileThree.fade(startTime + (startDur * 18), startTime + (startDur * 19), 0, 1);
		tileThree.fade(startTime + (startDur * 19), startTime + (startDur * 19) + endDur, 1, 0);
		
		tileOne.move(startTime + (startDur * 19), startTime + (startDur * 19), x4, y4, x4, y4);
		tileOne.fade(startTime + (startDur * 19), startTime + (startDur * 20), 0, 1);
		tileOne.fade(startTime + (startDur * 20), startTime + (startDur * 20) + endDur, 1, 0);
		
		tileTwo.move(startTime + (startDur * 20), startTime + (startDur * 20), x3, y4, x3, y4);
		tileTwo.fade(startTime + (startDur * 20), startTime + (startDur * 21), 0, 1);
		tileTwo.fade(startTime + (startDur * 21), startTime + (startDur * 21) + endDur, 1, 0);
		
		tileThree.move(startTime + (startDur * 21), startTime + (startDur * 21), x2, y4, x2, y4);
		tileThree.fade(startTime + (startDur * 21), startTime + (startDur * 22), 0, 1);
		tileThree.fade(startTime + (startDur * 22), startTime + (startDur * 22) + endDur, 1, 0);
		
		tileOne.move(startTime + (startDur * 22), startTime + (startDur * 22), x2, y3, x2, y3);
		tileOne.fade(startTime + (startDur * 22), startTime + (startDur * 23), 0, 1);
		tileOne.fade(startTime + (startDur * 23), startTime + (startDur * 23) + endDur, 1, 0);
		
		tileTwo.move(startTime + (startDur * 23), startTime + (startDur * 23), x2, y2, x2, y2);
		tileTwo.fade(startTime + (startDur * 23), startTime + (startDur * 24), 0, 1);
		tileTwo.fade(startTime + (startDur * 24), startTime + (startDur * 24) + endDur, 1, 0);
		
		tileThree.move(startTime + (startDur * 24), startTime + (startDur * 24), x3, y2, x3, y2);
		tileThree.fade(startTime + (startDur * 24), startTime + (startDur * 25), 0, 1);
		tileThree.fade(startTime + (startDur * 25), startTime + (startDur * 25) + endDur, 1, 0);
		
		tileOne.move(startTime + (startDur * 25), startTime + (startDur * 25), x4, y2, x4, y2);
		tileOne.fade(startTime + (startDur * 25), startTime + (startDur * 26), 0, 1);
		tileOne.fade(startTime + (startDur * 26), startTime + (startDur * 26) + endDur, 1, 0);
		
		tileTwo.move(startTime + (startDur * 26), startTime + (startDur * 26), x4, y3, x4, y3);
		tileTwo.fade(startTime + (startDur * 26), startTime + (startDur * 27), 0, 1);
		tileTwo.fade(startTime + (startDur * 27), startTime + (startDur * 27) + endDur, 1, 0);
		
		tileThree.move(startTime + (startDur * 27), startTime + (startDur * 27), x3, y3, x3, y3);
		tileThree.fade(startTime + (startDur * 27), startTime + (startDur * 28), 0, 1);
		tileThree.fade(startTime + (startDur * 28), startTime + (startDur * 28) + endDur, 1, 0);
		
}
//windowPanel(70872);

function windowPanelBR(startTime){
	var halfBar = 304;
	var quaterBar = halfBar / 2;
	var thickness = 0.1;
	var length = 8;
	
	// horizontal bar
	for(var abc = 100; abc <= 400; abc++){
		var lines = new Sprite("SB/square.jpg");
		lines.move(startTime, startTime, 320, abc, 320, abc);
		lines.scaleVec(startTime, startTime, length, thickness, length, thickness);
		lines.fade(startTime, startTime + halfBar, 0, 1);
		lines.fade(startTime + halfBar, startTime + (halfBar * 3), 1, 1);
		lines.fade(startTime + (halfBar * 3), startTime + (halfBar * 3) + quaterBar, 1, 0);
		abc = abc + 99;
	}
	
	for(var lel = 54.78; lel <= 756; lel++){
		var lines = new Sprite("SB/square.jpg");
		lines.move(startTime, startTime, lel, 247, lel, 247);
		lines.scaleVec(startTime, startTime, thickness, length, thickness, length);
		lines.fade(startTime, startTime + halfBar, 0, 1);
		lines.fade(startTime + halfBar, startTime + (halfBar * 3), 1, 1);
		lines.fade(startTime + (halfBar * 3), startTime + (halfBar * 3) + quaterBar, 1, 0);
		lel = lel + 176.78;
	}
	var tileSize = 0.22;
	var endDur = 76;
	var startDur = endDur / 2;
	
	var x1 = -34;
	var x2 = 144;
	var x3 = 321;
	var x4 = 499;
	var x5 = 677;
	var y1 = 52;
	var y2 = 152;
	var y3 = 252;
	var y4 = 352;
	var y5 = 452;
	
	
	var tileOne = new Sprite("SB/White.jpg");
	var tileTwo = new Sprite("SB/White.jpg");
	var tileThree = new Sprite("SB/White.jpg");
		tileOne.scale(startTime, startTime, tileSize, tileSize);
		tileTwo.scale(startTime, startTime, tileSize, tileSize);
		tileThree.scale(startTime, startTime, tileSize, tileSize);
		
		tileOne.move(startTime, startTime, x5, y5, x5, y5);
		tileOne.fade(startTime, startTime + startDur, 0, 1);
		tileOne.fade(startTime + startDur, startTime + startDur + endDur, 1, 0);
		
		tileTwo.move(startTime + (startDur * 1), startTime + (startDur * 1), x5, y4, x5, y4);
		tileTwo.fade(startTime + (startDur * 1), startTime + (startDur * 2), 0, 1);
		tileTwo.fade(startTime + (startDur * 2), startTime + (startDur * 2) + endDur, 1, 0);
		
		tileThree.move(startTime + (startDur * 3), startTime + (startDur * 3), x5, y3, x5, y3);
		tileThree.fade(startTime + (startDur * 3), startTime + (startDur * 4), 0, 1);
		tileThree.fade(startTime + (startDur * 4), startTime + (startDur * 4) + endDur, 1, 0);
		
		tileOne.move(startTime + (startDur * 4), startTime + (startDur * 4), x5, y2, x5, y2);
		tileOne.fade(startTime + (startDur * 4), startTime + (startDur * 5), 0, 1);
		tileOne.fade(startTime + (startDur * 5), startTime + (startDur * 5) + endDur, 1, 0);

		tileTwo.move(startTime + (startDur * 5), startTime + (startDur * 5), x5, y1, x5, y1);
		tileTwo.fade(startTime + (startDur * 5), startTime + (startDur * 6), 0, 1);
		tileTwo.fade(startTime + (startDur * 6), startTime + (startDur * 6) + endDur, 1, 0);
		
		tileThree.move(startTime + (startDur * 6), startTime + (startDur * 6), x4, y1, x4, y1);
		tileThree.fade(startTime + (startDur * 6), startTime + (startDur * 7), 0, 1);
		tileThree.fade(startTime + (startDur * 7), startTime + (startDur * 7) + endDur, 1, 0);
		
		tileOne.move(startTime + (startDur * 7), startTime + (startDur * 7), x3, y1, x3, y1);
		tileOne.fade(startTime + (startDur * 7), startTime + (startDur * 8), 0, 1);
		tileOne.fade(startTime + (startDur * 8), startTime + (startDur * 8) + endDur, 1, 0);
		
		tileTwo.move(startTime + (startDur * 8), startTime + (startDur * 8), x2, y1, x2, y1);
		tileTwo.fade(startTime + (startDur * 8), startTime + (startDur * 9), 0, 1);
		tileTwo.fade(startTime + (startDur * 9), startTime + (startDur * 9) + endDur, 1, 0);
		
		tileThree.move(startTime + (startDur * 9), startTime + (startDur * 9), x1, y1, x1, y1);
		tileThree.fade(startTime + (startDur * 9), startTime + (startDur * 10), 0, 1);
		tileThree.fade(startTime + (startDur * 10), startTime + (startDur * 10) + endDur, 1, 0);
		
		tileOne.move(startTime + (startDur * 10), startTime + (startDur * 10), x1, y2, x1, y2);
		tileOne.fade(startTime + (startDur * 10), startTime + (startDur * 11), 0, 1);
		tileOne.fade(startTime + (startDur * 11), startTime + (startDur * 11) + endDur, 1, 0);
		
		tileTwo.move(startTime + (startDur * 11), startTime + (startDur * 11), x1, y3, x1, y3);
		tileTwo.fade(startTime + (startDur * 11), startTime + (startDur * 12), 0, 1);
		tileTwo.fade(startTime + (startDur * 12), startTime + (startDur * 12) + endDur, 1, 0);
		
		tileThree.move(startTime + (startDur * 12), startTime + (startDur * 12), x1, y4, x1, y4);
		tileThree.fade(startTime + (startDur * 12), startTime + (startDur * 13), 0, 1);
		tileThree.fade(startTime + (startDur * 13), startTime + (startDur * 13) + endDur, 1, 0);
		
		tileOne.move(startTime + (startDur * 13), startTime + (startDur * 13), x1, y5, x1, y5);
		tileOne.fade(startTime + (startDur * 13), startTime + (startDur * 14), 0, 1);
		tileOne.fade(startTime + (startDur * 14), startTime + (startDur * 14) + endDur, 1, 0);
		
		tileTwo.move(startTime + (startDur * 14), startTime + (startDur * 14), x2, y5, x2, y5);
		tileTwo.fade(startTime + (startDur * 14), startTime + (startDur * 15), 0, 1);
		tileTwo.fade(startTime + (startDur * 15), startTime + (startDur * 15) + endDur, 1, 0);
		
		tileThree.move(startTime + (startDur * 15), startTime + (startDur * 15), x3, y5, x3, y5);
		tileThree.fade(startTime + (startDur * 15), startTime + (startDur * 16), 0, 1);
		tileThree.fade(startTime + (startDur * 16), startTime + (startDur * 16) + endDur, 1, 0);
		
		tileOne.move(startTime + (startDur * 16), startTime + (startDur * 16), x4, y5, x4, y5);
		tileOne.fade(startTime + (startDur * 16), startTime + (startDur * 17), 0, 1);
		tileOne.fade(startTime + (startDur * 17), startTime + (startDur * 17) + endDur, 1, 0);
		
		tileTwo.move(startTime + (startDur * 17), startTime + (startDur * 17), x4, y4, x4, y4);
		tileTwo.fade(startTime + (startDur * 17), startTime + (startDur * 18), 0, 1);
		tileTwo.fade(startTime + (startDur * 18), startTime + (startDur * 18) + endDur, 1, 0);
		
		tileThree.move(startTime + (startDur * 18), startTime + (startDur * 18), x4, y3, x4, y3);
		tileThree.fade(startTime + (startDur * 18), startTime + (startDur * 19), 0, 1);
		tileThree.fade(startTime + (startDur * 19), startTime + (startDur * 19) + endDur, 1, 0);
		
		tileOne.move(startTime + (startDur * 19), startTime + (startDur * 19), x4, y2, x4, y2);
		tileOne.fade(startTime + (startDur * 19), startTime + (startDur * 20), 0, 1);
		tileOne.fade(startTime + (startDur * 20), startTime + (startDur * 20) + endDur, 1, 0);
		
		tileTwo.move(startTime + (startDur * 20), startTime + (startDur * 20), x3, y2, x3, y2);
		tileTwo.fade(startTime + (startDur * 20), startTime + (startDur * 21), 0, 1);
		tileTwo.fade(startTime + (startDur * 21), startTime + (startDur * 21) + endDur, 1, 0);
		
		tileThree.move(startTime + (startDur * 21), startTime + (startDur * 21), x2, y2, x2, y2);
		tileThree.fade(startTime + (startDur * 21), startTime + (startDur * 22), 0, 1);
		tileThree.fade(startTime + (startDur * 22), startTime + (startDur * 22) + endDur, 1, 0);
		
		tileOne.move(startTime + (startDur * 22), startTime + (startDur * 22), x2, y3, x2, y3);
		tileOne.fade(startTime + (startDur * 22), startTime + (startDur * 23), 0, 1);
		tileOne.fade(startTime + (startDur * 23), startTime + (startDur * 23) + endDur, 1, 0);
		
		tileTwo.move(startTime + (startDur * 23), startTime + (startDur * 23), x2, y4, x2, y4);
		tileTwo.fade(startTime + (startDur * 23), startTime + (startDur * 24), 0, 1);
		tileTwo.fade(startTime + (startDur * 24), startTime + (startDur * 24) + endDur, 1, 0);
		
		tileThree.move(startTime + (startDur * 24), startTime + (startDur * 24), x3, y4, x3, y4);
		tileThree.fade(startTime + (startDur * 24), startTime + (startDur * 25), 0, 1);
		tileThree.fade(startTime + (startDur * 25), startTime + (startDur * 25) + endDur, 1, 0);
		
		tileOne.move(startTime + (startDur * 25), startTime + (startDur * 25), x4, y4, x4, y4);
		tileOne.fade(startTime + (startDur * 25), startTime + (startDur * 26), 0, 1);
		tileOne.fade(startTime + (startDur * 26), startTime + (startDur * 26) + endDur, 1, 0);
		
		tileTwo.move(startTime + (startDur * 26), startTime + (startDur * 26), x4, y3, x4, y3);
		tileTwo.fade(startTime + (startDur * 26), startTime + (startDur * 27), 0, 1);
		tileTwo.fade(startTime + (startDur * 27), startTime + (startDur * 27) + endDur, 1, 0);
		
		tileThree.move(startTime + (startDur * 27), startTime + (startDur * 27), x3, y3, x3, y3);
		tileThree.fade(startTime + (startDur * 27), startTime + (startDur * 28), 0, 1);
		tileThree.fade(startTime + (startDur * 28), startTime + (startDur * 28) + endDur, 1, 0);
		
}
//windowPanelBR(136659);

function windowPanelTL(startTime){
	var halfBar = 304;
	var quaterBar = halfBar / 2;
	var thickness = 0.1;
	var length = 8;
	
	// horizontal bar
	for(var abc = 100; abc <= 400; abc++){
		var lines = new Sprite("SB/square.jpg");
		lines.move(startTime, startTime, 320, abc, 320, abc);
		lines.scaleVec(startTime, startTime, length, thickness, length, thickness);
		lines.fade(startTime, startTime + halfBar, 0, 1);
		lines.fade(startTime + halfBar, startTime + (halfBar * 3), 1, 1);
		lines.fade(startTime + (halfBar * 3), startTime + (halfBar * 3) + quaterBar, 1, 0);
		abc = abc + 99;
	}
	
	for(var lel = 54.78; lel <= 756; lel++){
		var lines = new Sprite("SB/square.jpg");
		lines.move(startTime, startTime, lel, 247, lel, 247);
		lines.scaleVec(startTime, startTime, thickness, length, thickness, length);
		lines.fade(startTime, startTime + halfBar, 0, 1);
		lines.fade(startTime + halfBar, startTime + (halfBar * 3), 1, 1);
		lines.fade(startTime + (halfBar * 3), startTime + (halfBar * 3) + quaterBar, 1, 0);
		lel = lel + 176.78;
	}
	var tileSize = 0.22;
	var endDur = 76;
	var startDur = endDur / 2;
	
	var x1 = -34;
	var x2 = 144;
	var x3 = 321;
	var x4 = 499;
	var x5 = 677;
	var y1 = 52;
	var y2 = 152;
	var y3 = 252;
	var y4 = 352;
	var y5 = 452;
	
	
	var tileOne = new Sprite("SB/White.jpg");
	var tileTwo = new Sprite("SB/White.jpg");
	var tileThree = new Sprite("SB/White.jpg");
		tileOne.scale(startTime, startTime, tileSize, tileSize);
		tileTwo.scale(startTime, startTime, tileSize, tileSize);
		tileThree.scale(startTime, startTime, tileSize, tileSize);
		
		tileOne.move(startTime, startTime, x1, y1, x1, y1);
		tileOne.fade(startTime, startTime + startDur, 0, 1);
		tileOne.fade(startTime + startDur, startTime + startDur + endDur, 1, 0);
		
		tileTwo.move(startTime + (startDur * 1), startTime + (startDur * 1), x1, y2, x1, y2);
		tileTwo.fade(startTime + (startDur * 1), startTime + (startDur * 2), 0, 1);
		tileTwo.fade(startTime + (startDur * 2), startTime + (startDur * 2) + endDur, 1, 0);
		
		tileThree.move(startTime + (startDur * 3), startTime + (startDur * 3), x1, y3, x1, y3);
		tileThree.fade(startTime + (startDur * 3), startTime + (startDur * 4), 0, 1);
		tileThree.fade(startTime + (startDur * 4), startTime + (startDur * 4) + endDur, 1, 0);
		
		tileOne.move(startTime + (startDur * 4), startTime + (startDur * 4), x1, y4, x1, y4);
		tileOne.fade(startTime + (startDur * 4), startTime + (startDur * 5), 0, 1);
		tileOne.fade(startTime + (startDur * 5), startTime + (startDur * 5) + endDur, 1, 0);

		tileTwo.move(startTime + (startDur * 5), startTime + (startDur * 5), x1, y5, x1, y5);
		tileTwo.fade(startTime + (startDur * 5), startTime + (startDur * 6), 0, 1);
		tileTwo.fade(startTime + (startDur * 6), startTime + (startDur * 6) + endDur, 1, 0);
		
		tileThree.move(startTime + (startDur * 6), startTime + (startDur * 6), x2, y5, x2, y5);
		tileThree.fade(startTime + (startDur * 6), startTime + (startDur * 7), 0, 1);
		tileThree.fade(startTime + (startDur * 7), startTime + (startDur * 7) + endDur, 1, 0);
		
		tileOne.move(startTime + (startDur * 7), startTime + (startDur * 7), x3, y5, x3, y5);
		tileOne.fade(startTime + (startDur * 7), startTime + (startDur * 8), 0, 1);
		tileOne.fade(startTime + (startDur * 8), startTime + (startDur * 8) + endDur, 1, 0);
		
		tileTwo.move(startTime + (startDur * 8), startTime + (startDur * 8), x4, y5, x4, y5);
		tileTwo.fade(startTime + (startDur * 8), startTime + (startDur * 9), 0, 1);
		tileTwo.fade(startTime + (startDur * 9), startTime + (startDur * 9) + endDur, 1, 0);
		
		tileThree.move(startTime + (startDur * 9), startTime + (startDur * 9), x5, y5, x5, y5);
		tileThree.fade(startTime + (startDur * 9), startTime + (startDur * 10), 0, 1);
		tileThree.fade(startTime + (startDur * 10), startTime + (startDur * 10) + endDur, 1, 0);
		
		tileOne.move(startTime + (startDur * 10), startTime + (startDur * 10), x5, y4, x5, y4);
		tileOne.fade(startTime + (startDur * 10), startTime + (startDur * 11), 0, 1);
		tileOne.fade(startTime + (startDur * 11), startTime + (startDur * 11) + endDur, 1, 0);
		
		tileTwo.move(startTime + (startDur * 11), startTime + (startDur * 11), x5, y3, x5, y3);
		tileTwo.fade(startTime + (startDur * 11), startTime + (startDur * 12), 0, 1);
		tileTwo.fade(startTime + (startDur * 12), startTime + (startDur * 12) + endDur, 1, 0);
		
		tileThree.move(startTime + (startDur * 12), startTime + (startDur * 12), x5, y2, x5, y2);
		tileThree.fade(startTime + (startDur * 12), startTime + (startDur * 13), 0, 1);
		tileThree.fade(startTime + (startDur * 13), startTime + (startDur * 13) + endDur, 1, 0);
		
		tileOne.move(startTime + (startDur * 13), startTime + (startDur * 13), x5, y1, x5, y1);
		tileOne.fade(startTime + (startDur * 13), startTime + (startDur * 14), 0, 1);
		tileOne.fade(startTime + (startDur * 14), startTime + (startDur * 14) + endDur, 1, 0);
		
		tileTwo.move(startTime + (startDur * 14), startTime + (startDur * 14), x4, y1, x4, y1);
		tileTwo.fade(startTime + (startDur * 14), startTime + (startDur * 15), 0, 1);
		tileTwo.fade(startTime + (startDur * 15), startTime + (startDur * 15) + endDur, 1, 0);
		
		tileThree.move(startTime + (startDur * 15), startTime + (startDur * 15), x3, y1, x3, y1);
		tileThree.fade(startTime + (startDur * 15), startTime + (startDur * 16), 0, 1);
		tileThree.fade(startTime + (startDur * 16), startTime + (startDur * 16) + endDur, 1, 0);
		
		tileOne.move(startTime + (startDur * 16), startTime + (startDur * 16), x2, y1, x2, y1);
		tileOne.fade(startTime + (startDur * 16), startTime + (startDur * 17), 0, 1);
		tileOne.fade(startTime + (startDur * 17), startTime + (startDur * 17) + endDur, 1, 0);
		
		tileTwo.move(startTime + (startDur * 17), startTime + (startDur * 17), x2, y2, x2, y2);
		tileTwo.fade(startTime + (startDur * 17), startTime + (startDur * 18), 0, 1);
		tileTwo.fade(startTime + (startDur * 18), startTime + (startDur * 18) + endDur, 1, 0);
		
		tileThree.move(startTime + (startDur * 18), startTime + (startDur * 18), x2, y3, x2, y3);
		tileThree.fade(startTime + (startDur * 18), startTime + (startDur * 19), 0, 1);
		tileThree.fade(startTime + (startDur * 19), startTime + (startDur * 19) + endDur, 1, 0);
		
		tileOne.move(startTime + (startDur * 19), startTime + (startDur * 19), x2, y4, x2, y4);
		tileOne.fade(startTime + (startDur * 19), startTime + (startDur * 20), 0, 1);
		tileOne.fade(startTime + (startDur * 20), startTime + (startDur * 20) + endDur, 1, 0);
		
		tileTwo.move(startTime + (startDur * 20), startTime + (startDur * 20), x3, y4, x3, y4);
		tileTwo.fade(startTime + (startDur * 20), startTime + (startDur * 21), 0, 1);
		tileTwo.fade(startTime + (startDur * 21), startTime + (startDur * 21) + endDur, 1, 0);
		
		tileThree.move(startTime + (startDur * 21), startTime + (startDur * 21), x4, y4, x4, y4);
		tileThree.fade(startTime + (startDur * 21), startTime + (startDur * 22), 0, 1);
		tileThree.fade(startTime + (startDur * 22), startTime + (startDur * 22) + endDur, 1, 0);
		
		tileOne.move(startTime + (startDur * 22), startTime + (startDur * 22), x4, y3, x4, y3);
		tileOne.fade(startTime + (startDur * 22), startTime + (startDur * 23), 0, 1);
		tileOne.fade(startTime + (startDur * 23), startTime + (startDur * 23) + endDur, 1, 0);
		
		tileTwo.move(startTime + (startDur * 23), startTime + (startDur * 23), x4, y2, x4, y2);
		tileTwo.fade(startTime + (startDur * 23), startTime + (startDur * 24), 0, 1);
		tileTwo.fade(startTime + (startDur * 24), startTime + (startDur * 24) + endDur, 1, 0);
		
		tileThree.move(startTime + (startDur * 24), startTime + (startDur * 24), x3, y2, x3, y2);
		tileThree.fade(startTime + (startDur * 24), startTime + (startDur * 25), 0, 1);
		tileThree.fade(startTime + (startDur * 25), startTime + (startDur * 25) + endDur, 1, 0);
		
		tileOne.move(startTime + (startDur * 25), startTime + (startDur * 25), x2, y2, x2, y2);
		tileOne.fade(startTime + (startDur * 25), startTime + (startDur * 26), 0, 1);
		tileOne.fade(startTime + (startDur * 26), startTime + (startDur * 26) + endDur, 1, 0);
		
		tileTwo.move(startTime + (startDur * 26), startTime + (startDur * 26), x2, y3, x2, y3);
		tileTwo.fade(startTime + (startDur * 26), startTime + (startDur * 27), 0, 1);
		tileTwo.fade(startTime + (startDur * 27), startTime + (startDur * 27) + endDur, 1, 0);
		
		tileThree.move(startTime + (startDur * 27), startTime + (startDur * 27), x3, y3, x3, y3);
		tileThree.fade(startTime + (startDur * 27), startTime + (startDur * 28), 0, 1);
		tileThree.fade(startTime + (startDur * 28), startTime + (startDur * 28) + endDur, 1, 0);
		
}
//windowPanelTL(186608);

function linePetal(startTime, endTime, posX, posY, size, turnWay, addSpin) {
	posX = posX + 64.0;
	posY = posY + 55.0;
	var radius = size * 1.4;
	var sizeX = (size / 200.0) / 4;
	var sizeY = (size / 50.0);
	var spin = 0.0;
	var pi = 3.1415925;
//	var addSpin = 0.06;
	var scopeSize = size / 100.0;
	var totalSpin = 0;
	
	var randX = rand(0, 30);
	var randY = rand(0, 30);
	var randNeg = rand(0, 3);
	
	if(randNeg == 1){
		randX = randX * -1;
	}
	if(randNeg == 2){
		randY = randY * -1;
	}
	if(randNeg == 3){
		randX = randX * -1;
		randY = randY * -1;
	}
	
	if(turnWay == 1){
	for(var quantity=1; quantity<25; quantity++){ //25 petals
			var wing = new Sprite("SB/square.jpg",Foreground, Centre);
			wing.scaleVec(1, startTime, startTime + 305, sizeX, 0, sizeX, sizeY/1);
			wing.scaleVec(startTime + 305, endTime - 305, sizeX, sizeY/1, sizeX, sizeY/1.4);
			wing.scaleVec(2, endTime - 305, endTime, sizeX, sizeY/1.4, sizeX, 0);
			wing.fade(startTime, startTime + 305, 0, 1);
			wing.fade(startTime + 305, endTime - 305, 1, 1);
			wing.fade(endTime - 305, endTime, 1, 0);
			// wing.move(startTime, endTime, posX, posY, posX + randX, posY + randY);
			for(var i=startTime; i<endTime; i++){
				wing.move(i, i + 76, (radius * sin(spin)) + posX, (radius * cos(spin)) + posY, (radius * sin(spin - addSpin)) + posX, (radius * cos(spin - addSpin)) + posY);
				wing.rotate(i, i + 76, -spin, -spin + (addSpin));
				spin = spin - addSpin;
				i = i + 76;
			}
			spin = (0.261799 * quantity); //petal location
		}
	}
	
	if(turnWay == 0){
	for(var quantity=1; quantity<25; quantity++){ //25 petals
			var wing = new Sprite("SB/square.jpg",Foreground, Centre);
			wing.scaleVec(1, startTime, startTime + 305, sizeX, 0, sizeX, sizeY/1);
			wing.scaleVec(startTime + 305, endTime - 305, sizeX, sizeY/1, sizeX, sizeY/1.4);
			wing.scaleVec(2, endTime - 305, endTime, sizeX, sizeY/1.4, sizeX, 0);
			wing.fade(startTime, startTime + 305, 0, 1);
			wing.fade(startTime + 305, endTime - 305, 1, 1);
			wing.fade(endTime - 305, endTime, 1, 0);
			// wing.move(startTime, endTime, posX, posY, posX + randX, posY + randY);
			for(var i=startTime; i<endTime; i++){
				wing.move(i, i + 76, (radius * sin(spin)) + posX, (radius * cos(spin)) + posY, (radius * sin(spin + addSpin)) + posX, (radius * cos(spin + addSpin)) + posY);
				wing.rotate(i, i + 76, -spin, -spin - (addSpin));
				spin = spin + addSpin;
				i = i + 76;
			}
			spin = (0.261799 * quantity); //petal location
		}
	}
	
}

//linePetal(177928, 186608, -100, 68, 70, 1, 0.04);
//linePetal(177928, 186608, 450, 130, 40, 0, 0.04);
//linePetal(177928, 186608, 236, 380, 50, 0, 0.04);

//linePetal(187674, 192090, 136, 272, 30, 0, 0.03);
//linePetal(187674, 192090, 630, 284, 70, 1, 0.04);
//linePetal(187674, 192090, -100, -50, 55, 0, 0.04);

function crosshair(startTime, endTime, posX, posY, size, turnWay, addSpin){
	posX = posX + 64.0;
	posY = posY + 55.0;
	var radius = size * 1.4;
	var sizeX = (size / 200.0) / 4;
	var sizeY = (size / 50.0);
	var spin = 0.0;
	var pi = 3.1415925;
//	var addSpin = 0.06;
	var scopeSize = size / 100.0;
	var totalSpin = 0;
	
	var randX = rand(0, 30);
	var randY = rand(0, 30);
	var randNeg = rand(0, 3);
	
	if(randNeg == 1){
		randX = randX * -1;
	}
	if(randNeg == 2){
		randY = randY * -1;
	}
	if(randNeg == 3){
		randX = randX * -1;
		randY = randY * -1;
	}

	
	if(turnWay == 0){
		var scopingSm = new Sprite("SB/Onion Layer/Onion2.png");
		scopingSm.scale(startTime, endTime - 305, scopeSize/2.0, scopeSize/2.0);
		scopingSm.scale(1, endTime - 305, endTime, scopeSize/2.0, 0);
		scopingSm.fade(startTime, startTime + 305, 0, 1);
		scopingSm.fade(startTime + 305, endTime - 305, 1, 1);
		scopingSm.fade(endTime - 305, endTime, 1, 0);
		scopingSm.move(startTime, endTime, posX, posY, posX + randX, posY + randY);
		
		var scoping = new Sprite("SB/Onion Layer/Onion2.png");
		scoping.scale(2, startTime, startTime + 305, 0, scopeSize);
		scoping.scale(startTime + 305, endTime - 305, scopeSize, scopeSize);
		scoping.scale(2, endTime - 305, endTime, scopeSize, 0);
		scoping.fade(startTime, startTime + 305, 0, 1);
		scoping.fade(startTime + 305, endTime - 305, 1, 1);
		scoping.fade(endTime - 305, endTime, 1, 0);
		scoping.move(startTime, endTime, posX, posY, posX + randX, posY + randY);
		
		for(var quantity=1; quantity<3; quantity++){ //5 petals
			var wing = new Sprite("SB/square.jpg");
			wing.scaleVec(1, startTime, startTime + 305, sizeX, 0, sizeX, sizeY * 2.2);
			wing.scaleVec(startTime + 305, endTime - 305, sizeX, sizeY * 2.2, sizeX, sizeY * 2.2);
			wing.scaleVec(2, endTime - 305, endTime, sizeX, sizeY * 2.2, sizeX, 0);
			wing.fade(startTime, startTime + 305, 0, 1);
			wing.fade(startTime + 305, endTime - 305, 1, 1);
			wing.fade(endTime - 305, endTime, 1, 0);
			wing.move(startTime, endTime, posX, posY, posX + randX, posY + randY);
			for(var i=startTime; i<endTime; i++){
			//	wing.move(i, i + 76, (radius * sin(spin)) + posX, (radius * cos(spin)) + posY, (radius * sin(spin - addSpin)) + posX, (radius * cos(spin - addSpin)) + posY);
				wing.rotate(i, i + 76, -spin - addSpin  + (addSpin), -spin + (addSpin));
				spin = spin - addSpin;
				i = i + 76;
			}
			spin = (1.5708 * quantity); //petal location
		}
		
		var scopingDot = new Sprite("SB/Onion Layer/Onion0.png");
		scopingDot.scale(startTime, endTime - 305, scopeSize/5.0, scopeSize/5.0);
		scopingDot.scale(endTime - 305, endTime, scopeSize/5.0, scopeSize/2);
		scopingDot.fade(startTime, startTime + 305, 0, 1);
		scopingDot.fade(startTime + 305, endTime - 152, 1, 1);
		scopingDot.fade(endTime - 152, endTime, 1, 0);
		scopingDot.move(startTime, endTime, posX, posY, posX + randX, posY + randY);
		scopingDot.color(255,50,50);
	}
	
	if(turnWay == 1){
		var scopingSm = new Sprite("SB/Onion Layer/Onion2.png");
		scopingSm.scale(startTime, endTime - 305, scopeSize/2.0, scopeSize/2.0);
		scopingSm.scale(1, endTime - 305, endTime, scopeSize/2.0, 0);
		scopingSm.fade(startTime, startTime + 305, 0, 1);
		scopingSm.fade(startTime + 305, endTime - 305, 1, 1);
		scopingSm.fade(endTime - 305, endTime, 1, 0);
		scopingSm.move(startTime, endTime, posX, posY, posX + randX, posY + randY);
		
		var scoping = new Sprite("SB/Onion Layer/Onion2.png");
		scoping.scale(2, startTime, startTime + 305, 0, scopeSize);
		scoping.scale(startTime + 305, endTime - 305, scopeSize, scopeSize);
		scoping.scale(2, endTime - 305, endTime, scopeSize, 0);
		scoping.fade(startTime, startTime + 305, 0, 1);
		scoping.fade(startTime + 305, endTime - 305, 1, 1);
		scoping.fade(endTime - 305, endTime, 1, 0);
		scoping.move(startTime, endTime, posX, posY, posX + randX, posY + randY);
		
		for(var quantity=1; quantity<3; quantity++){ //5 petals
			var wing = new Sprite("SB/square.jpg");
			wing.scaleVec(1, startTime, startTime + 305, sizeX, 0, sizeX, sizeY * 2.2);
			wing.scaleVec(startTime + 305, endTime - 305, sizeX, sizeY * 2.2, sizeX, sizeY * 2.2);
			wing.scaleVec(2, endTime - 305, endTime, sizeX, sizeY * 2.2, sizeX, 0);
			wing.fade(startTime, startTime + 305, 0, 1);
			wing.fade(startTime + 305, endTime - 305, 1, 1);
			wing.fade(endTime - 305, endTime, 1, 0);
			wing.move(startTime, endTime, posX, posY, posX + randX, posY + randY);
			for(var i=startTime; i<endTime; i++){
			//	wing.move(i, i + 76, (radius * sin(spin)) + posX, (radius * cos(spin)) + posY, (radius * sin(spin + addSpin)) + posX, (radius * cos(spin + addSpin)) + posY);
				wing.rotate(i, i + 76, -spin + addSpin - (addSpin), -spin - (addSpin));
				spin = spin + addSpin;
				i = i + 76;
			}
			spin = (1.5708 * quantity); //petal location
		}
		
		var scopingDot = new Sprite("SB/Onion Layer/Onion0.png");
		scopingDot.scale(startTime, endTime - 305, scopeSize/5.0, scopeSize/5.0);
		scopingDot.scale(endTime - 305, endTime, scopeSize/5.0, scopeSize/2);
		scopingDot.fade(startTime, startTime + 305, 0, 1);
		scopingDot.fade(startTime + 305, endTime - 152, 1, 1);
		scopingDot.fade(endTime - 152, endTime, 1, 0);
		scopingDot.move(startTime, endTime, posX, posY, posX + randX, posY + randY);
		scopingDot.color(255,50,50);
	}
	
	if(turnWay == 2){
		var scopingSm = new Sprite("SB/Onion Layer/Onion2.png", Background, Centre);
		scopingSm.scale(startTime, endTime - 305, scopeSize/2.0, scopeSize/2.0);
		scopingSm.scale(1, endTime - 305, endTime, scopeSize/2.0, 0);
		scopingSm.fade(startTime, startTime + 305, 0, 1);
		scopingSm.fade(startTime + 305, endTime - 305, 1, 1);
		scopingSm.fade(endTime - 305, endTime, 1, 0);
		scopingSm.move(startTime, endTime, posX, posY, posX + randX, posY + randY);
		
		var scoping = new Sprite("SB/Onion Layer/Onion2.png", Background, Centre);
		scoping.scale(2, startTime, startTime + 305, 0, scopeSize);
		scoping.scale(startTime + 305, endTime - 305, scopeSize, scopeSize);
		scoping.scale(2, endTime - 305, endTime, scopeSize, 0);
		scoping.fade(startTime, startTime + 305, 0, 1);
		scoping.fade(startTime + 305, endTime - 305, 1, 1);
		scoping.fade(endTime - 305, endTime, 1, 0);
		scoping.move(startTime, endTime, posX, posY, posX + randX, posY + randY);
	
		for(var quantity=1; quantity<3; quantity++){ //4 petals
			var wing = new Sprite("SB/square.jpg", Background, Centre);
			wing.scaleVec(1, startTime, startTime + 305, sizeX, 0, sizeX, sizeY * 2.2);
			wing.scaleVec(startTime + 305, endTime - 305, sizeX, sizeY * 2.2, sizeX, sizeY * 2.2);
			wing.scaleVec(2, endTime - 305, endTime, sizeX, sizeY * 2.2, sizeX, 0);
			wing.fade(startTime, startTime + 305, 0, 1);
			wing.fade(startTime + 305, endTime - 305, 1, 1);
			wing.fade(endTime - 305, endTime, 1, 0);
			wing.move(startTime, endTime, posX, posY, posX + randX, posY + randY);
			for(var i=startTime; i<endTime; i++){
			//	wing.move(i, i + 76, (radius * sin(spin)) + posX, (radius * cos(spin)) + posY, (radius * sin(spin - addSpin)) + posX, (radius * cos(spin - addSpin)) + posY);
				wing.rotate(i, i + 76, -spin - addSpin  + (addSpin), -spin + (addSpin));
				spin = spin - addSpin;
				i = i + 76;
			}
			spin = (1.5708 * quantity); //petal location
		}
		
		var scopingDot = new Sprite("SB/Onion Layer/Onion0.png", Background, Centre);
		scopingDot.scale(startTime, endTime - 305, scopeSize/5.0, scopeSize/5.0);
		scopingDot.scale(endTime - 305, endTime, scopeSize/5.0, scopeSize/2);
		scopingDot.fade(startTime, startTime + 305, 0, 1);
		scopingDot.fade(startTime + 305, endTime - 152, 1, 1);
		scopingDot.fade(endTime - 152, endTime, 1, 0);
		scopingDot.move(startTime, endTime, posX, posY, posX + randX, posY + randY);
		scopingDot.color(255,50,50);
		
	}
	
	if(turnWay == 3){
		var scopingSm = new Sprite("SB/Onion Layer/Onion2.png", Background, Centre);
		scopingSm.scale(startTime, endTime - 305, scopeSize/2.0, scopeSize/2.0);
		scopingSm.scale(1, endTime - 305, endTime, scopeSize/2.0, 0);
		scopingSm.fade(startTime, startTime + 305, 0, 1);
		scopingSm.fade(startTime + 305, endTime - 305, 1, 1);
		scopingSm.fade(endTime - 305, endTime, 1, 0);
		scopingSm.move(startTime, endTime, posX, posY, posX + randX, posY + randY);
		
		var scoping = new Sprite("SB/Onion Layer/Onion2.png", Background, Centre);
		scoping.scale(2, startTime, startTime + 305, 0, scopeSize);
		scoping.scale(startTime + 305, endTime - 305, scopeSize, scopeSize);
		scoping.scale(2, endTime - 305, endTime, scopeSize, 0);
		scoping.fade(startTime, startTime + 305, 0, 1);
		scoping.fade(startTime + 305, endTime - 305, 1, 1);
		scoping.fade(endTime - 305, endTime, 1, 0);
		scoping.move(startTime, endTime, posX, posY, posX + randX, posY + randY);
		
		for(var quantity=1; quantity<3; quantity++){ //5 petals
			var wing = new Sprite("SB/square.jpg", Background, Centre);
			wing.scaleVec(1, startTime, startTime + 305, sizeX, 0, sizeX, sizeY * 2.2);
			wing.scaleVec(startTime + 305, endTime - 305, sizeX, sizeY * 2.2, sizeX, sizeY * 2.2);
			wing.scaleVec(2, endTime - 305, endTime, sizeX, sizeY * 2.2, sizeX, 0);
			wing.fade(startTime, startTime + 305, 0, 1);
			wing.fade(startTime + 305, endTime - 305, 1, 1);
			wing.fade(endTime - 305, endTime, 1, 0);
			wing.move(startTime, endTime, posX, posY, posX + randX, posY + randY);
			for(var i=startTime; i<endTime; i++){
				//wing.move(i, i + 76, (radius * sin(spin)) + posX, (radius * cos(spin)) + posY, (radius * sin(spin + addSpin)) + posX, (radius * cos(spin + addSpin)) + posY);
				wing.rotate(i, i + 76, -spin + addSpin - (addSpin), -spin - (addSpin));
				spin = spin + addSpin;
				i = i + 76;
				//println((radius * sin(spin)) + posX);
			}
			spin = (1.5708 * (quantity)); //petal location
		}
		
		
		var scopingDot = new Sprite("SB/Onion Layer/Onion0.png", Background, Centre);
		scopingDot.scale(startTime, endTime - 305, scopeSize/5.0, scopeSize/5.0);
		scopingDot.scale(endTime - 305, endTime, scopeSize/5.0, scopeSize/2);
		scopingDot.fade(startTime, startTime + 305, 0, 1);
		scopingDot.fade(startTime + 305, endTime - 152, 1, 1);
		scopingDot.fade(endTime - 152, endTime, 1, 0);
		scopingDot.move(startTime, endTime, posX, posY, posX + randX, posY + randY);
		scopingDot.color(255,50,50);	
	}
}

//crosshair(113511, 123258,460,208,70,0,0.03);
//crosshair(113511, 123258,-33,56,40,1,0.05);

//crosshair(127978,136659,96,224,80,2,0.04); // big
//crosshair(127978,136659,604,48,40,3,0.06);

//crosshair(137725,141227,372,108,80,3,0.04);


function goAround(startTime, endTime, posX, posY, size, turnWay){
	posX = posX + 64;
	posY = posY + 55;
	var radius = size * 2;
	var sizeX = (size / 200.0) / 4;
	var sizeY = (size / 100.0) / 2;
	var spin = 0;
	var pi = 3.1415925;
	var addSpin = 0.06;
	
	if(turnWay == 0){
		for(var quantity=1; quantity<13; quantity++){ // 12 petals
			var wing = new Sprite("SB/square.jpg");
			wing.scaleVec(startTime, startTime, sizeX, sizeY, sizeX, sizeY);
			wing.fade(startTime, startTime + 305, 0, 1);
			wing.fade(startTime + 305, endTime - 305, 1, 1);
			wing.fade(endTime - 305, endTime, 1, 0);
			for(var i=startTime; i<endTime; i++){
				wing.move(i, i + 76, (radius * sin(spin)) + posX, (radius * cos(spin)) + posY, (radius * sin(spin - addSpin)) + posX, (radius * cos(spin - addSpin)) + posY);
				wing.rotate(i, i + 76, -spin - addSpin  + (pi/2), -spin + (pi/2));
				spin = spin - addSpin;
				i = i + 76;
			}
			spin = (0.523599 * quantity);
		}
	}
	
	if(turnWay == 1){
		for(var quantity=1; quantity<13; quantity++){ // 12 petals
			var wing = new Sprite("SB/square.jpg");
			wing.scaleVec(startTime, startTime, sizeX, sizeY, sizeX, sizeY);
			wing.fade(startTime, startTime + 305, 0, 1);
			wing.fade(startTime + 305, endTime - 305, 1, 1);
			wing.fade(endTime - 305, endTime, 1, 0);
			for(var i=startTime; i<endTime; i++){
				wing.move(i, i + 76, (radius * sin(spin)) + posX, (radius * cos(spin)) + posY, (radius * sin(spin + addSpin)) + posX, (radius * cos(spin + addSpin)) + posY);
				wing.rotate(i, i + 76, -spin + addSpin + (pi/2), -spin + (pi/2));
				spin = spin + addSpin;
				i = i + 76;
			}
			spin = (0.523599 * quantity);
		}
	}
	
	if(turnWay == 2){
		for(var quantity=1; quantity<13; quantity++){ // 12 petals
			var wing = new Sprite("SB/square.jpg", Background, Centre);
			wing.scaleVec(startTime, startTime, sizeX, sizeY, sizeX, sizeY);
			wing.fade(startTime, startTime + 305, 0, 1);
			wing.fade(startTime + 305, endTime - 305, 1, 1);
			wing.fade(endTime - 305, endTime, 1, 0);
			for(var i=startTime; i<endTime; i++){
				wing.move(i, i + 76, (radius * sin(spin)) + posX, (radius * cos(spin)) + posY, (radius * sin(spin - addSpin)) + posX, (radius * cos(spin - addSpin)) + posY);
				wing.rotate(i, i + 76, -spin - addSpin  + (pi/2), -spin + (pi/2));
				spin = spin - addSpin;
				i = i + 76;
			}
			spin = (0.523599 * quantity);
		}
	}
	
	if(turnWay == 3){
		for(var quantity=1; quantity<13; quantity++){ // 12 petals
			var wing = new Sprite("SB/square.jpg", Background, Centre);
			wing.scaleVec(startTime, startTime, sizeX, sizeY, sizeX, sizeY);
			wing.fade(startTime, startTime + 305, 0, 1);
			wing.fade(startTime + 305, endTime - 305, 1, 1);
			wing.fade(endTime - 305, endTime, 1, 0);
			for(var i=startTime; i<endTime; i++){
				wing.move(i, i + 76, (radius * sin(spin)) + posX, (radius * cos(spin)) + posY, (radius * sin(spin + addSpin)) + posX, (radius * cos(spin + addSpin)) + posY);
				wing.rotate(i, i + 76, -spin + addSpin + (pi/2), -spin + (pi/2));
				spin = spin + addSpin;
				i = i + 76;
			}
			spin = (0.523599 * quantity);
		}
	}
	
}

/*
goAround(47725,57471,412,316,120,1);
goAround(47725,57471,412,316,40,0);
goAround(47725,57471,20,256,30,0);
goAround(47725,57471,312,-56,160,1);
*/

function gyroRain(startTime){
	var onionOne = new Sprite("SB/Onion Layer/Onion0.png");
	var onionTwo = new Sprite("SB/Onion Layer/Onion1.png");
	var onionThree = new Sprite("SB/Onion Layer/Onion2.png");
	var onionFour = new Sprite("SB/Onion Layer/Onion3.png");
	
	var tick = 624; //312
	var tickFour = 936; // go four times (468)
	var tickThree = 1248; //go three times (624)
	var tickTwo = 1872; //936
	
	var slowDown = 1;
	

	var size = 0.8;
	
	var moveEasing = 1;
	
	//println(size);
	
	var posX = 320;
	var posY = 192 + 55;
	
	var endPosY = 192 + 55;
	
	var endTime = startTime + 7320;
	
	var opposite = rand(0,1);
	var spinOpposite = 1;
	
	if(opposite == 1){
		spinOpposite = -1;
	}
	if(opposite == 0){
		spinOpposite = 1;
	}
	
	if(slowDown == 1){
		
	}
	
	
	
	/*
	onionOne.color(0,0,0);
	onionTwo.color(0,0,0);
	onionThree.color(0,0,0);
	onionFour.color(0,0,0);
	*/
	
	onionOne.fade(startTime, startTime + tickTwo, 0, 1);
	onionOne.fade(startTime + tickTwo, endTime - tickTwo, 1, 1);
	onionOne.fade(endTime - tickTwo, endTime, 1, 0);
	
	onionTwo.fade(startTime, startTime + tickTwo, 0, 1);
	onionTwo.fade(startTime + tickTwo, endTime - tickTwo, 1, 1);
	onionTwo.fade(endTime - tickTwo, endTime, 1, 0);
	
	onionThree.fade(startTime, startTime + tickTwo, 0, 1);
	onionThree.fade(startTime + tickTwo, endTime - tickTwo, 1, 1);
	onionThree.fade(endTime - tickTwo, endTime, 1, 0);
	
	onionFour.fade(startTime, startTime + tickTwo, 0, 1);
	onionFour.fade(startTime + tickTwo, endTime - tickTwo, 1, 1);
	onionFour.fade(endTime - tickTwo, endTime, 1, 0);
	
	onionOne.scale(startTime, startTime, size, size);
	onionTwo.scale(startTime, startTime, size, size);
	onionThree.scale(startTime, startTime, size, size);
	onionFour.scale(startTime, startTime, size, size);
	
	onionOne.move(moveEasing, startTime, endTime, posX, posY, posX, endPosY);
	onionTwo.move(moveEasing, startTime, endTime, posX, posY, posX, endPosY);
	onionThree.move(moveEasing, startTime, endTime, posX, posY, posX, endPosY);
	onionFour.move(moveEasing, startTime, endTime, posX, posY, posX, endPosY);
	
	onionOne.rotate(startTime, endTime, 0, 10 * spinOpposite);
	onionTwo.rotate(startTime, endTime, 0, -8 * spinOpposite);
	onionThree.rotate(startTime, endTime, 0, 6 * spinOpposite);
	onionFour.rotate(startTime, endTime, 0, -4 * spinOpposite);
	
	onionOne.scaleVec(startTime+(tick*0), startTime+(tick*1),size,size,-size,size);
	onionOne.scaleVec(startTime+(tick*1), startTime+(tick*2),-size,size,size,size);
	onionOne.scaleVec(startTime+(tick*2), startTime+(tick*3),size,size,-size,size);
	onionOne.scaleVec(startTime+(tick*3), startTime+(tick*4),-size,size,size,size);
	onionOne.scaleVec(startTime+(tick*4), startTime+(tick*5),size,size,-size,size);
	onionOne.scaleVec(startTime+(tick*5), startTime+(tick*6),-size,size,size,size);
	onionOne.scaleVec(startTime+(tick*6), startTime+(tick*7),size,size,-size,size);
	onionOne.scaleVec(startTime+(tick*7), startTime+(tick*8),-size,size,size,size);
	onionOne.scaleVec(startTime+(tick*8), startTime+(tick*9),size,size,-size,size);
	onionOne.scaleVec(startTime+(tick*9), startTime+(tick*10),-size,size,size,size);
	
	onionTwo.scaleVec(startTime+(tickFour*0), startTime+(tickFour*1),size,size,-size,size);
	onionTwo.scaleVec(startTime+(tickFour*1), startTime+(tickFour*2),-size,size,size,size);
	onionTwo.scaleVec(startTime+(tickFour*2), startTime+(tickFour*3),size,size,-size,size);
	onionTwo.scaleVec(startTime+(tickFour*3), startTime+(tickFour*4),-size,size,size,size);
	onionTwo.scaleVec(startTime+(tickFour*4), startTime+(tickFour*5),size,size,-size,size);
	onionTwo.scaleVec(startTime+(tickFour*5), startTime+(tickFour*6),-size,size,size,size);
	onionTwo.scaleVec(startTime+(tickFour*6), startTime+(tickFour*7),size,size,-size,size);
	onionTwo.scaleVec(startTime+(tickFour*7), startTime+(tickFour*8),-size,size,size,size);
	
	onionThree.scaleVec(startTime+(tickThree*0), startTime+(tickThree*1),size,size,-size,size);
	onionThree.scaleVec(startTime+(tickThree*1), startTime+(tickThree*2),-size,size,size,size);
	onionThree.scaleVec(startTime+(tickThree*2), startTime+(tickThree*3),size,size,-size,size);
	onionThree.scaleVec(startTime+(tickThree*3), startTime+(tickThree*4),size,size,-size,size);
	onionThree.scaleVec(startTime+(tickThree*4), startTime+(tickThree*5),-size,size,size,size);
	onionThree.scaleVec(startTime+(tickThree*5), startTime+(tickThree*6),size,size,-size,size);

	onionFour.scaleVec(startTime+(tickTwo*0), startTime+(tickTwo*1),size,size,-size,size);
	onionFour.scaleVec(startTime+(tickTwo*1), startTime+(tickTwo*2),size,size,-size,size);
	onionFour.scaleVec(startTime+(tickTwo*2), startTime+(tickTwo*3),size,size,-size,size);
	onionFour.scaleVec(startTime+(tickTwo*3), startTime+(tickTwo*4),size,size,-size,size);
	
}

//gyroRain(94019);

/*
for(var AA=47572; AA<57166; AA++){
gyroRain(AA);
AA = AA + 304;
}
*/

function flash(startTime){
	var flashPic = new Sprite("SB/White.jpg");
	flashPic.scale(startTime, startTime, 1.05, 1.05);
	flashPic.fade(startTime - 304, startTime, 0, 1);
	flashPic.fade(startTime, startTime + 609, 1, 0);
}
//flash(221785);
//flash(202293);
//flash(187674);
//flash(167115);
//flash(177928);
//flash(127978);
//flash(137725);
//flash(113511);
/*
flash(62192);
flash(71938);
flash(81684);
*/


function sunStarBeta(centerX, centerY, startTime, colour, speed) {

// The bottom one is for older parameters. (only for gaia's insane)
// function sunStarBeta(startTime, speed, centerX, centerY, colour) {

	centerX = centerX + 64;
    centerY = centerY + 55;
    var speedDur = speed * 368;
    
    // THE BOTTOM CODE IS FOR THE HIGHLIGHTS
    var darkness = 0;
    
    var speedFade = 1472;
    var highlights = new Sprite("SB/highlight.png");
	highlights.move(startTime, startTime + speedFade, centerX, centerY, centerX, centerY);
    highlights.fade(2, startTime - 92, startTime, 0, 1);


	/*
	
	Combo1 : 145,145,145 	// Grey
	Combo2 : 235,174,186	// Light Pink
	Combo3 : 238,236,136	// Light Peach
	Combo4 : 146,207,234	// Light Blue
	
	*/
	
	if(colour == 1) {
		highlights.color(145,145,145); 	// Grey
		darkness = 0.8;
	}
	if(colour == 2) {
		highlights.color(235,174,186); // Light Pink
		darkness = 0.8;
	}
	if(colour == 3) {
		highlights.color(238,236,136); // Light Peach
		darkness = 0.8;
	}
	if(colour == 4) {
		highlights.color(146,207,234); // Light Blue
		darkness = 0.8;
	}
	
    highlights.fade(1, startTime, startTime + speedFade, 1, 0);

	// THE BOTTOM CODE IS FOR THE LEGS OF THE EFFECTS
    
    var fixedLengthOne = 200;
    var fixedLengthTwo = 200;
    var fixedLengthThree = 200;
    var fixedLengthFour = 200;
    var fixedLengthFive = 200;
    
    var pi = 3.14159265;
    var angleDiff = 12;
    
    var randomQuadrantOne = rand(0 + angleDiff, 72 - angleDiff);
    var randomQuadrantTwo = rand(72 + angleDiff, 144 - angleDiff);
    var randomQuadrantThree = rand(144 + angleDiff, 216 - angleDiff);
    var randomQuadrantFour = rand(216 + angleDiff, 288 - angleDiff); 
    var randomQuadrantFive = rand(288 + angleDiff, 360 - angleDiff);
    
    var quadrantOneRad = ((randomQuadrantOne * pi) / 180);
    var quadrantTwoRad = ((randomQuadrantTwo * pi) / 180);
    var quadrantThreeRad = ((randomQuadrantThree * pi) / 180);
    var quadrantFourRad = ((randomQuadrantFour * pi) / 180);
    var quadrantFiveRad = ((randomQuadrantFive * pi) / 180);
    
    var quadrantOneLength = rand(8, 10);
    var quadrantTwoLength = rand(8, 10);
    var quadrantThreeLength = rand(8, 10);
    var quadrantFourLength = rand(8, 10);
    var quadrantFiveLength = rand(8, 10);
    
    var shortLength = 0.5;
    var thickness = 0.5;
    
    // println(quadrantOneRad);
    
   	var legThingsQuadOne = new Sprite("SB/squareSm.png");
   	legThingsQuadOne.rotate(startTime - 92, startTime, 0, -quadrantOneRad);
    legThingsQuadOne.fade(startTime - 92, startTime, 0, 1);
    legThingsQuadOne.fade(startTime, startTime + speedDur, 1, 1);
    legThingsQuadOne.move(startTime, startTime + speedDur, centerX, centerY, centerX + (fixedLengthOne * cos(quadrantOneRad)), centerY - (fixedLengthOne * sin(quadrantOneRad)));
	legThingsQuadOne.scaleVec(startTime, startTime + 184, shortLength, thickness, quadrantOneLength, thickness);
	legThingsQuadOne.scaleVec(startTime + 184, startTime + speedDur, quadrantOneLength, thickness, shortLength, thickness);
	legThingsQuadOne.fade(startTime + speedDur, startTime + speedDur + 184, 1, 0);
	
	var legThingsQuadTwo = new Sprite("SB/squareSm.png");
   	legThingsQuadTwo.rotate(startTime - 92, startTime, 0, -quadrantTwoRad);
    legThingsQuadTwo.fade(startTime - 92, startTime, 0, 1);
    legThingsQuadTwo.fade(startTime, startTime + speedDur, 1, 1);
    legThingsQuadTwo.move(startTime, startTime + speedDur, centerX, centerY, centerX + (fixedLengthTwo * cos(quadrantTwoRad)), centerY - (fixedLengthTwo * sin(quadrantTwoRad)));
	legThingsQuadTwo.scaleVec(startTime, startTime + 184, shortLength, thickness, quadrantTwoLength, thickness);
	legThingsQuadTwo.scaleVec(startTime + 184, startTime + speedDur, quadrantTwoLength, thickness, shortLength, thickness);
	legThingsQuadTwo.fade(startTime + speedDur, startTime + speedDur + 184, 1, 0);
	
	var legThingsQuadThree = new Sprite("SB/squareSm.png");
   	legThingsQuadThree.rotate(startTime - 92, startTime, 0, -quadrantThreeRad);
    legThingsQuadThree.fade(startTime - 92, startTime, 0, 1);
    legThingsQuadThree.fade(startTime, startTime + speedDur, 1, 1);
    legThingsQuadThree.move(startTime, startTime + speedDur, centerX, centerY, centerX + (fixedLengthThree * cos(quadrantThreeRad)), centerY - (fixedLengthThree * sin(quadrantThreeRad)));
	legThingsQuadThree.scaleVec(startTime, startTime + 184, shortLength, thickness, quadrantThreeLength, thickness);
	legThingsQuadThree.scaleVec(startTime + 184, startTime + speedDur, quadrantThreeLength, thickness, shortLength, thickness);
	legThingsQuadThree.fade(startTime + speedDur, startTime + speedDur + 184, 1, 0);
	
	var legThingsQuadFour = new Sprite("SB/squareSm.png");
   	legThingsQuadFour.rotate(startTime - 92, startTime, 0, -quadrantFourRad);
    legThingsQuadFour.fade(startTime - 92, startTime, 0, 1);
    legThingsQuadFour.fade(startTime, startTime + speedDur, 1, 1);
    legThingsQuadFour.move(startTime, startTime + speedDur, centerX, centerY, centerX + (fixedLengthFour * cos(quadrantFourRad)), centerY - (fixedLengthFour * sin(quadrantFourRad)));
	legThingsQuadFour.scaleVec(startTime, startTime + 184, shortLength, thickness, quadrantFourLength, thickness);
	legThingsQuadFour.scaleVec(startTime + 184, startTime + speedDur, quadrantFourLength, thickness, shortLength, thickness);
	legThingsQuadFour.fade(startTime + speedDur, startTime + speedDur + 184, 1, 0);
	
	var legThingsQuadFive = new Sprite("SB/squareSm.png");
   	legThingsQuadFive.rotate(startTime - 92, startTime, 0, -quadrantFiveRad);
    legThingsQuadFive.fade(startTime - 92, startTime, 0, 1);
    legThingsQuadFive.fade(startTime, startTime + speedDur, 1, 1);
    legThingsQuadFive.move(startTime, startTime + speedDur, centerX, centerY, centerX + (fixedLengthFive * cos(quadrantFiveRad)), centerY - (fixedLengthFive * sin(quadrantFiveRad)));
	legThingsQuadFive.scaleVec(startTime, startTime + 184, shortLength, thickness, quadrantFiveLength, thickness);
	legThingsQuadFive.scaleVec(startTime + 184, startTime + speedDur, quadrantFiveLength, thickness, shortLength, thickness);
	legThingsQuadFive.fade(startTime + speedDur, startTime + speedDur + 184, 1, 0);
	
	// THE BOTTOM CODE IS FOR THE CENTER DOT
    var centerPoint = new Sprite("SB/dot.png");
    centerPoint.fade(2, startTime - 184, startTime, 0, 1);
    centerPoint.move(startTime, startTime + speedDur, centerX, centerY, centerX, centerY);
    centerPoint.scale(1, startTime, startTime + speedDur, 1, 2);
    centerPoint.fade(2, startTime, startTime + speedDur, 1, 1);
    centerPoint.fade(2, startTime + speedDur, startTime + speedDur + 184, 1, 0);
    // println(quadrantOneRad);
}

// function sunStarBeta(centerX, centerY, startTime, colour, speed) {

	/*
	
	Combo1 : 145,145,145 	// Grey
	Combo2 : 235,174,186	// Light Pink
	Combo3 : 238,236,136	// Light Peach
	Combo4 : 146,207,234	// Light Blue
	
	*/
/*
sunStarBeta(365,94,171989,3,1);
sunStarBeta(274,245,172294,3,1);
sunStarBeta(122,151,172598,3,1);
sunStarBeta(217,3,172903,3,1);
sunStarBeta(472,158,173816,4,1);
sunStarBeta(286,180,173968,1,1);
sunStarBeta(472,158,174273,1,1);
sunStarBeta(286,180,174425,2,1);
sunStarBeta(135,129,174577,2,1);
sunStarBeta(287,3,174730,3,1);
sunStarBeta(448,39,174882,3,1);
sunStarBeta(238,359,175034,4,1);
sunStarBeta(367,22,175186,4,1);
sunStarBeta(433,338,175339,4,1);
sunStarBeta(210,155,175491,4,1);
*/
// sunStarBeta(210,155,175643,1,3);
/*
leHighlight(365,94,171836,2);
leHighlight(365,94,171912,2);
leHighlight(274,245,172141,2);
leHighlight(274,245,172217,2);
leHighlight(122,151,172445,2);
leHighlight(122,151,172521,2);
leHighlight(217,3,172750,2);
leHighlight(217,3,172826,2);
leHighlight(249,125,173054,3);
leHighlight(215,167,173131,3);
leHighlight(227,219,173207,4);
leHighlight(274,245,173283,4);
leHighlight(327,236,173359,4);
leHighlight(353,189,173435,4);
leHighlight(339,136,173511,4);
leHighlight(365,88,173587,4);
leHighlight(418,77,173664,4);
leHighlight(463,106,173740,4);
*/


/*
sunStarBeta(20,24,57471);
sunStarBeta(208,96,57775);
sunStarBeta(396,168,58080);
sunStarBeta(208,96,58384);
sunStarBeta(300,132,58536);
sunStarBeta(112,60,58842);
sunStarBeta(20,24,58994);
sunStarBeta(208,96,59298);
sunStarBeta(396,168,59603);
sunStarBeta(336,28,59907);
sunStarBeta(396,168,60364);
sunStarBeta(377,319,60821);
*/




function gyro(startTime, endTime, posX, posY, size, opposite){
	var onionOne = new Sprite("SB/Onion Layer/Onion0.png");
	var onionTwo = new Sprite("SB/Onion Layer/Onion1.png");
	var onionThree = new Sprite("SB/Onion Layer/Onion2.png");
	var onionFour = new Sprite("SB/Onion Layer/Onion3.png");
	
	var tick = 312;
	var tickFour = 468; // go four times
	var tickThree = 624; //go three times
	var tickTwo = 936;
	
	onionOne.color(0,0,0);
	onionTwo.color(0,0,0);
	onionThree.color(0,0,0);
	onionFour.color(0,0,0);
	
	onionOne.fade(startTime, startTime + tickTwo, 0, 1);
	onionOne.fade(startTime + tickTwo, endTime - tickTwo, 1, 1);
	onionOne.fade(endTime - tickTwo, endTime, 1, 0);
	
	onionTwo.fade(startTime, startTime + tickTwo, 0, 1);
	onionTwo.fade(startTime + tickTwo, endTime - tickTwo, 1, 1);
	onionTwo.fade(endTime - tickTwo, endTime, 1, 0);
	
	onionThree.fade(startTime, startTime + tickTwo, 0, 1);
	onionThree.fade(startTime + tickTwo, endTime - tickTwo, 1, 1);
	onionThree.fade(endTime - tickTwo, endTime, 1, 0);
	
	onionFour.fade(startTime, startTime + tickTwo, 0, 1);
	onionFour.fade(startTime + tickTwo, endTime - tickTwo, 1, 1);
	onionFour.fade(endTime - tickTwo, endTime, 1, 0);
	
	onionOne.scale(startTime, startTime, size, size);
	onionTwo.scale(startTime, startTime, size, size);
	onionThree.scale(startTime, startTime, size, size);
	onionFour.scale(startTime, startTime, size, size);
	
	onionOne.move(1, startTime, endTime, posX, posY + 300 * (-1 * opposite), posX, posY);
	onionTwo.move(1, startTime, endTime, posX, posY + 300 * (-1 * opposite), posX, posY);
	onionThree.move(1, startTime, endTime, posX, posY + 300 * (-1 * opposite), posX, posY);
	onionFour.move(1, startTime, endTime, posX, posY + 300 * (-1 * opposite), posX, posY);
	
	onionOne.rotate(startTime, endTime, 0, 10);
	onionTwo.rotate(startTime, endTime, 0, -8);
	onionThree.rotate(startTime, endTime, 0, 6);
	onionFour.rotate(startTime, endTime, 0, -4);
	
	onionOne.scaleVec(startTime+(tick*0), startTime+(tick*1),size,size,-size,size);
	onionOne.scaleVec(startTime+(tick*1), startTime+(tick*2),-size,size,size,size);
	onionOne.scaleVec(startTime+(tick*2), startTime+(tick*3),size,size,-size,size);
	onionOne.scaleVec(startTime+(tick*3), startTime+(tick*4),-size,size,size,size);
	onionOne.scaleVec(startTime+(tick*4), startTime+(tick*5),size,size,-size,size);
	onionOne.scaleVec(startTime+(tick*5), startTime+(tick*6),-size,size,size,size);
	
	onionTwo.scaleVec(startTime+(tickFour*0), startTime+(tickFour*1),size,size,-size,size);
	onionTwo.scaleVec(startTime+(tickFour*1), startTime+(tickFour*2),-size,size,size,size);
	onionTwo.scaleVec(startTime+(tickFour*2), startTime+(tickFour*3),size,size,-size,size);
	onionTwo.scaleVec(startTime+(tickFour*3), startTime+(tickFour*4),-size,size,size,size);
	
	onionThree.scaleVec(startTime+(tickThree*0), startTime+(tickThree*1),size,size,-size,size);
	onionThree.scaleVec(startTime+(tickThree*1), startTime+(tickThree*2),-size,size,size,size);
	onionThree.scaleVec(startTime+(tickThree*2), startTime+(tickThree*3),size,size,-size,size);

	onionFour.scaleVec(startTime+(tickTwo*0), startTime+(tickTwo*1),size,size,-size,size);
	onionFour.scaleVec(startTime+(tickTwo*1), startTime+(tickTwo*2),size,size,-size,size);
	
}

// gyro(661, 2536, 320, 237, 0.7, 1);

/*
function highlightBar(time) {
	var lightBar = new Sprite("SB/flashh.png");
	lightBar.move(time, time, 320, 320, 320, 320);
	lightBar.fade(time - 152, time, 0, 1);
	lightBar.fade(time, time + 304, 1, 0);
	
}
for(var i=8740; i<28232; i++) {
	highlightBar(i);
	
	i = i + 607;
}
*/


function tileZeroGrav(){
	var centreX = 256;
	var centreY = 192;
	
	centreX = centreX + 64;
	centreY = centreY + 55;
	
	var boxX = -192 + 10;
	var boxY = -64 + 15;
	
	var earlyEndTime = 5973;
	var endTime = 6286;
	
	var durBox = 625;
	
	var maxX = 704 + 64;
	var maxY = 416 + 55;
	
	var squareSize = 59;
	
//	var latencyBox = 19.5;
	
	var upVar = 500;
	var pi = 3.141592653;
	var randSideSpin = rand(0, 1);
	var randRotate = rand(0, pi);
	var scaleVecRandom = rand(0,4);
	
	var randomDur = rand(0, 1250);
	
	for(var y = 1; y < 12; y++) {
		for(var x = 1; x < 17; x++) {
		scaleVecRandom = rand(0, 4);
		
		var box = new Sprite ("SB/square.jpg");
		box.scale(0, 0, 0.5, 0.5);
		//box.color(0,0,0);
		box.move(2, 0, earlyEndTime + randomDur, boxX + (squareSize * x), boxY + (squareSize * y), boxX + (squareSize * x), boxY + (squareSize * y) - upVar);
		randomDur = rand(0, 1250);
		
		//Flips
		if(scaleVecRandom == 1){ // Normal
			var halfTurn = (earlyEndTime + randomDur)  / 2.0;
			box.scaleVec(0, halfTurn, 1, 1, -1, 1);
			box.scaleVec(halfTurn, halfTurn + halfTurn, -1, 1, 1, 1);
		}
		if(scaleVecRandom == 2){ // Fast
			var quaterTurn = (earlyEndTime + randomDur) / 4.0;
			box.scaleVec(0, quaterTurn, 1, 1, -1, 1);
			box.scaleVec(quaterTurn, quaterTurn * 2, -1, 1, 1, 1);
			box.scaleVec(quaterTurn * 2, quaterTurn * 3, 1, 1, -1, 1);
			box.scaleVec(quaterTurn * 3, quaterTurn * 4, -1, 1, 1, 1);
		
		}
		if(scaleVecRandom == 3){ // Faster
			var eighthTurn = (earlyEndTime + randomDur) / 8.0;
			var posNeg = 0;
			for(var z = 0; z < 8; z++){
				if(z % 2 == 0){
					posNeg = 1;
				}
				if(z % 2 == 1){
					posNeg = -1;
				}
				box.scaleVec(eighthTurn * z, eighthTurn * (z + 1), 1 * posNeg, 1, -1 * posNeg, 1);
			}
		}
		if(scaleVecRandom == 4){ // Fastest
			var sixthTurn = (earlyEndTime + randomDur) / 8.0;
			var posNeg = 0;
			for(var z = 0; z < 16; z++){
				if(z % 2 == 0){
					posNeg = 1;
				}
				if(z % 2 == 1){
					posNeg = -1;
				}
				box.scaleVec(sixthTurn * z, sixthTurn * (z + 1), 1 * posNeg, 1, -1 * posNeg, 1);
			}
		}
		
		
		randRotate = rand(0, pi);
		randSideSpin = rand(0, 1);
		if(randSideSpin == 1){
			randSideSpin = -1;
		}
		if(randSideSpin == 0){
			randSideSpin = 1;
		}
		
		
//		println(randSideSpin);
		
		// Rotate
		box.rotate(0, earlyEndTime + randomDur, 0, ((pi) + randRotate) * randSideSpin);
		
		box.fade(2, 0, earlyEndTime + randomDur, 1, 0);
		
		box.color(0, earlyEndTime + randomDur, 0,0,0,255,255,255);
		
//		latencyBox = latencyBox + 19.5;
		}
	}
}

function leHighlight(centerX, centerY, startTime, colour) {

	/*
	
	Combo1 : 145,145,145 	// Grey
	Combo2 : 235,174,186	// Light Pink
	Combo3 : 238,236,136	// Light Peach
	Combo4 : 146,207,234	// Light Blue
	
	*/

	centerX = centerX + 64;
	centerY = centerY + 55;

	var speed = 899;
	var darkness = 1;

	var highlight = new Sprite("SB/highlight.png");
	if(colour == 1) {
		highlight.color(145,145,145); 	// Grey
		darkness = 0.8;
	}
	if(colour == 2) {
		highlight.color(235,174,186); // Light Pink
		darkness = 0.8;
	}
	if(colour == 3) {
		highlight.color(238,236,136); // Light Peach
		darkness = 0.8;
	}
	if(colour == 4) {
		highlight.color(146,207,234); // Light Blue
		darkness = 0.8;
	}

	
	highlight.fade(2, startTime - 76, startTime, 0, darkness);
	highlight.move(startTime, startTime + speed, centerX, centerY, centerX, centerY);
	highlight.fade(1, startTime, startTime + speed, darkness, 0);
	
}

	/*
	
	Combo1 : 145,145,145 	// Grey
	Combo2 : 235,174,186	// Light Pink
	Combo3 : 238,236,136	// Light Peach
	Combo4 : 146,207,234	// Light Blue
	
	*/

function ringBlast(centerX, centerY, startTime) {
	centerX = centerX + 64;
    centerY = centerY + 55;
	var ringEffect = new Sprite("SB/ring.png");
	var ringAppear = 92;
	var ringSpeed = 736;
	ringEffect.fade(2, startTime - ringAppear, startTime, 0, 1);
	ringEffect.move(startTime, startTime + ringSpeed, centerX, centerY, centerX, centerY);
	ringEffect.scale(startTime, startTime + ringSpeed, 0.2, 1);
	ringEffect.fade(1, startTime, startTime + ringSpeed, 1, 0);

}

//TOYBOT

/*
ringBlast(324,224,21379);
ringBlast(144,244,21532);
ringBlast(124,112,21836);
ringBlast(72,304,22141);
ringBlast(332,312,22598);
ringBlast(300,200,22750);
ringBlast(288,380,22902);
ringBlast(220,184,23054);
ringBlast(456,250,23207);
ringBlast(416,76,23511);
ringBlast(360,352,23816);
ringBlast(300,200,23968);
ringBlast(344,208,148841);
ringBlast(288,292,149298);
ringBlast(168,344,149755);
ringBlast(192,348,150212);
ringBlast(112,264,150669);
ringBlast(198,157,151126);
ringBlast(328,148,151582);
ringBlast(504,212,152496);
ringBlast(308,274,152953);
ringBlast(292,356,153410);
ringBlast(144,336,153714);
ringBlast(188,204,153867);
ringBlast(108,248,154171);
ringBlast(172,116,154628);
ringBlast(20,184,154780);
ringBlast(188,204,154933);
ringBlast(268,188,155085);
ringBlast(392,240,155390);
ringBlast(268,188,155846);
ringBlast(284,336,156151);
ringBlast(188,204,156303);
ringBlast(286,351,156456);
ringBlast(348,184,156608);
ringBlast(200,296,156760);
ringBlast(68,232,157065);

leHighlight(116,188,46735,2);
leHighlight(93,210,46811,2);
leHighlight(82,240,46887,2);
leHighlight(85,271,46963,2);
leHighlight(100,299,47039,2);
leHighlight(126,318,47115,3);
leHighlight(277,178,47268,3);
leHighlight(278,353,47420,3);
leHighlight(428,212,47572,3);
leHighlight(354,195,70872,1);
leHighlight(440,32,71176,1);
leHighlight(439,55,71252,1);
leHighlight(438,78,71329,1);
leHighlight(437,101,71404,1);
leHighlight(436,124,71481,1);
leHighlight(360,32,71633,1);
leHighlight(512,104,71785,1);
leHighlight(208,296,76506,3);
leHighlight(216,268,76582,3);
leHighlight(224,240,76659,3);
leHighlight(304,312,76811,3);
leHighlight(114,101,77115,4);
leHighlight(204,144,77725,4);
leHighlight(392,248,78029,1);
leHighlight(396,264,78105,1);
leHighlight(280,344,78334,1);
leHighlight(328,160,78943,1);
leHighlight(444,256,79247,1);
leHighlight(272,232,79857,2);
leHighlight(272,232,80466,2);
leHighlight(280,108,81075,2);
leHighlight(252,84,81151,3);
leHighlight(216,80,81227,3);
leHighlight(184,96,81303,3);
leHighlight(152,112,81379,3);
leHighlight(116,108,81455,3);
leHighlight(90,84,81532,3);
leHighlight(296,56,92648,1);
leHighlight(68,128,93105,1);
leHighlight(54,57,93334,1);
leHighlight(54,57,93410,1);
leHighlight(160,152,93562,1);
leHighlight(96,224,93714,1);
leHighlight(108,296,102547,1);
leHighlight(124,192,102775,1);
leHighlight(156,172,102851,1);
leHighlight(176,140,102928,1);
leHighlight(172,104,103004,1);
leHighlight(148,76,103080,1);
leHighlight(116,64,103156,2);
leHighlight(32,84,103384,2);
leHighlight(28,96,103461,2);
leHighlight(144,210,103613,2);
leHighlight(508,291,112598,3);
leHighlight(467,305,112674,3);
leHighlight(425,295,112750,3);
leHighlight(394,265,112826,3);
leHighlight(388,220,112902,4);
leHighlight(392,24,113054,4);
leHighlight(392,24,113131,4);
leHighlight(392,24,113207,4);
leHighlight(256,168,113359,4);
leHighlight(484,140,126912,1);
leHighlight(483,106,126988,1);
leHighlight(465,78,127064,1);
leHighlight(436,60,127141,1);
leHighlight(404,56,127217,1);
leHighlight(372,64,127293,1);
leHighlight(348,84,127369,1);
leHighlight(316,252,127522,2);
leHighlight(284,264,127598,2);
leHighlight(248,260,127674,2);
leHighlight(220,240,127750,2);
leHighlight(204,208,127826,2);
leHighlight(6,103,136506,3);
leHighlight(6,103,136582,3);
leHighlight(6,103,136659,3);
leHighlight(120,248,136811,4);
leHighlight(116,220,136887,4);
leHighlight(113,193,136963,4);
leHighlight(64,316,137115,1);
leHighlight(99,334,137191,1);
leHighlight(138,334,137267,1);
leHighlight(174,318,137343,1);
leHighlight(210,302,137420,1);
leHighlight(249,302,137496,1);
leHighlight(285,321,137572,1);
leHighlight(440,176,141379,1);
leHighlight(436,184,141456,1);
leHighlight(144,158,142141,3);
leHighlight(167,181,142217,3);
leHighlight(199,190,142293,3);
leHighlight(231,183,142369,3);
leHighlight(257,162,142446,3);
leHighlight(282,141,142522,3);
leHighlight(314,134,142598,3);
leHighlight(346,143,142674,3);
leHighlight(116,156,146862,3);
leHighlight(156,148,146938,3);
leHighlight(436,96,174425,1);
leHighlight(462,118,174501,1);
leHighlight(477,150,174577,1);
leHighlight(479,185,174653,1);
leHighlight(466,217,174729,1);
leHighlight(442,242,174805,1);
leHighlight(408,252,174882,1);
leHighlight(372,248,174958,1);
leHighlight(340,232,175034,2);
leHighlight(204,184,175186,2);
leHighlight(204,184,175263,2);
leHighlight(388,56,186608,1);
leHighlight(484,204,186760,1);
leHighlight(480,220,186836,1);
leHighlight(476,236,186912,1);
leHighlight(300,144,187065,1);
leHighlight(372,276,187217,2);
leHighlight(337,257,187293,2);
leHighlight(297,257,187369,2);
leHighlight(263,277,187445,2);
leHighlight(242,310,187522,2);
leHighlight(252,200,192318,3);
leHighlight(284,196,192395,3);
leHighlight(308,180,192471,3);
leHighlight(332,164,192547,3);
leHighlight(364,160,192624,3);
leHighlight(332,105,193156,4);
leHighlight(480,184,193461,4);
leHighlight(392,168,193765,4);
leHighlight(252,192,194907,1);
leHighlight(220,192,194984,1);
leHighlight(192,180,195060,1);
leHighlight(236,184,196506,1);
leHighlight(280,172,196582,1);
leHighlight(324,180,196659,1);
leHighlight(360,204,196735,2);
leHighlight(380,244,196811,2);
leHighlight(380,288,196887,2);
leHighlight(280,172,211735,2);
leHighlight(248,160,211811,2);
leHighlight(212,164,211887,2);
leHighlight(184,188,211963,2);
leHighlight(156,212,212039,2);
leHighlight(120,216,212115,2);
leHighlight(88,204,212191,2);
leHighlight(196,145,215846,1);
leHighlight(172,368,215999,1);
leHighlight(172,368,216075,1);
leHighlight(172,368,216151,1);
leHighlight(64,272,216303,1);
leHighlight(224,228,216456,2);
leHighlight(312,364,216608,2);
leHighlight(320,172,216760,2);

sunStarBeta(368,300,57471,4,1);
sunStarBeta(392,296,57775,4,1);
sunStarBeta(416,292,58080,4,1);
sunStarBeta(152,244,58384,1,1);
sunStarBeta(152,244,58537,1,1);
sunStarBeta(240,260,58841,1,1);
sunStarBeta(240,260,58993,1,1);
sunStarBeta(328,276,59298,1,1);
sunStarBeta(416,292,59603,1,1);
sunStarBeta(368,92,59907,2,2);
sunStarBeta(392,192,60364,3,2);
sunStarBeta(416,292,60821,4,2);
sunStarBeta(456,44,75745,1,1);
sunStarBeta(317,207,75897,1,1);
sunStarBeta(510,224,76049,1,1);
sunStarBeta(252,156,76202,2,1);
sunStarBeta(408,260,76354,2,1);
sunStarBeta(128,224,76963,4,1);
sunStarBeta(24,328,77420,4,1);
sunStarBeta(204,144,77725,4,1);
sunStarBeta(304,160,77877,4,1);
sunStarBeta(424,164,78638,1,1);
sunStarBeta(400,280,78181,1,1);
sunStarBeta(500,80,79095,1,1);
sunStarBeta(120,176,79704,2,1);
sunStarBeta(312,148,79400,2,1);
sunStarBeta(116,308,80009,2,1);
sunStarBeta(304,356,80313,2,1);
sunStarBeta(460,280,80618,3,1);
sunStarBeta(272,232,80923,3,1);
sunStarBeta(408,302,123257,2,1);
sunStarBeta(236,272,123562,2,1);
sunStarBeta(347,138,123867,2,1);
sunStarBeta(276,192,124171,3,1);
sunStarBeta(276,192,124324,3,1);
sunStarBeta(396,213,124628,3,1);
sunStarBeta(396,213,124780,3,1);
sunStarBeta(318,306,125085,3,1);
sunStarBeta(347,138,125390,3,1);
sunStarBeta(186,198,125694,4,1);
sunStarBeta(193,71,126151,4,1);
sunStarBeta(306,14,126608,4,1);
sunStarBeta(312,208,141227,1,1);
sunStarBeta(432,192,141532,1,1);
sunStarBeta(408,80,141836,2,1);
sunStarBeta(357,318,141989,2,1);
sunStarBeta(384,292,142902,4,1);
sunStarBeta(292,280,143207,4,1);
sunStarBeta(460,204,143359,4,1);
sunStarBeta(362,93,143511,4,1);
sunStarBeta(392,372,143816,4,1);
sunStarBeta(292,280,143968,1,1);
sunStarBeta(228,336,144273,1,1);
sunStarBeta(72,240,144424,1,1);
sunStarBeta(46,323,144577,1,1);
sunStarBeta(188,176,144882,1,1);
sunStarBeta(168,62,145110,1,1);
sunStarBeta(165,47,145186,2,1);
sunStarBeta(88,152,145339,2,1);
sunStarBeta(204,256,145491,3,1);
sunStarBeta(162,29,145643,3,1);
sunStarBeta(72,240,145796,4,1);
sunStarBeta(276,120,145948,4,1);
sunStarBeta(88,152,146100,1,1);
sunStarBeta(328,196,146252,1,1);
sunStarBeta(328,196,146329,1,1);
sunStarBeta(328,196,146405,1,1);
sunStarBeta(308,32,146633,2,1);
sunStarBeta(288,24,146709,2,1);
sunStarBeta(196,140,147014,3,1);
sunStarBeta(172,64,147166,3,1);
sunStarBeta(136,240,147318,3,1);
sunStarBeta(136,184,171684,2,1);
sunStarBeta(176,336,171989,2,1);
sunStarBeta(132,176,172293,3,1);
sunStarBeta(176,343,172598,3,1);
sunStarBeta(308,168,172902,4,1);
sunStarBeta(132,176,173207,4,1);
sunStarBeta(148,8,173511,4,1);
sunStarBeta(233,198,173664,4,1);
sunStarBeta(381,335,174120,4,1);
sunStarBeta(204,184,175339,2,1);
sunStarBeta(128,336,175491,2,1);
sunStarBeta(92,192,175643,3,3);
sunStarBeta(140,264,191405,1,1);
sunStarBeta(140,264,191481,2,1);
sunStarBeta(28,124,191633,2,1);
sunStarBeta(208,96,191785,2,1);
sunStarBeta(32,228,191938,3,1);
sunStarBeta(112,56,192090,3,1);
sunStarBeta(224,192,192242,3,1);
sunStarBeta(392,168,192699,4,1);
sunStarBeta(460,280,192851,4,1);
sunStarBeta(308,208,193613,4,1);
sunStarBeta(220,192,193917,1,1);
sunStarBeta(364,292,194222,1,1);
sunStarBeta(272,376,194374,1,1);
sunStarBeta(240,92,194679,1,1);
sunStarBeta(280,184,194831,1,1);
sunStarBeta(168,160,195136,2,1);
sunStarBeta(204,8,195288,2,1);
sunStarBeta(317,115,195440,2,1);
sunStarBeta(72,176,195593,3,1);
sunStarBeta(240,92,195745,3,1);
sunStarBeta(228,279,195897,3,1);
sunStarBeta(136,80,196049,4,1);
sunStarBeta(356,184,196202,4,1);
sunStarBeta(224,328,196354,4,1);
sunStarBeta(360,328,196963,2,1);
sunStarBeta(220,264,197115,2,1);
sunStarBeta(80,324,197268,2,1);
sunStarBeta(120,184,197420,2,1);
sunStarBeta(44,72,197572,3,1);
sunStarBeta(228,112,197725,3,1);
sunStarBeta(108,283,197877,3,1);
sunStarBeta(140,36,198181,4,1);
sunStarBeta(304,168,198334,4,1);
sunStarBeta(380,56,198486,4,1);
sunStarBeta(228,112,198714,4,1);
sunStarBeta(228,112,198791,1,1);
sunStarBeta(384,332,199095,1,1);
sunStarBeta(420,128,199400,1,1);
sunStarBeta(284,248,199552,1,1);
sunStarBeta(472,288,199704,1,1);
sunStarBeta(327,125,200009,2,1);
sunStarBeta(373,232,200313,2,1);
sunStarBeta(184,261,200466,2,1);
sunStarBeta(140,100,200770,2,1);
sunStarBeta(96,224,200923,2,1);
sunStarBeta(284,248,201227,3,1);
sunStarBeta(304,220,201303,3,1);
sunStarBeta(308,184,201379,3,1);
sunStarBeta(296,152,201456,3,1);
sunStarBeta(272,128,201532,4,1);
sunStarBeta(260,96,201608,4,1);
sunStarBeta(268,64,201684,4,1);
sunStarBeta(300,48,201760,4,1);
sunStarBeta(336,52,201836,1,1);
sunStarBeta(472,224,201989,1,1);
sunStarBeta(468,64,202141,1,1);
sunStarBeta(64,160,219806,3,1);
sunStarBeta(256,152,220110,4,1);
sunStarBeta(8,96,220263,4,1);
sunStarBeta(164,40,220415,4,1);
sunStarBeta(144,200,220643,4,1);
sunStarBeta(144,200,220719,1,1);
sunStarBeta(76,40,220872,1,1);
sunStarBeta(296,168,221024,2,1);
sunStarBeta(316,4,221176,2,1);
sunStarBeta(216,168,221329,3,1);
sunStarBeta(196,4,221481,3,1);
sunStarBeta(368,200,221633,4,1);
sunStarBeta(436,40,221786,4,1);
*/


//MOPH
/*
ringBlast(136,304,21075);
ringBlast(60,236,21227);
ringBlast(156,200,21379);
ringBlast(144,320,21532);
ringBlast(40,232,21684);
ringBlast(168,184,21836);
ringBlast(60,96,21989);
ringBlast(192,48,22141);
ringBlast(336,52,22445);
ringBlast(456,116,22598);
ringBlast(320,132,22750);
ringBlast(420,40,22902);
ringBlast(392,172,23054);
ringBlast(472,284,23207);
ringBlast(256,236,23816);
ringBlast(224,336,23968);
ringBlast(276,64,148841);
ringBlast(84,96,149298);
ringBlast(192,240,149755);
ringBlast(20,296,150060);
ringBlast(191,137,150669);
ringBlast(112,308,151126);
ringBlast(320,239,152496);
ringBlast(484,68,153105);
ringBlast(292,40,153562);
ringBlast(292,40,153714);
ringBlast(104,40,154171);
ringBlast(104,40,154324);
ringBlast(164,156,154628);
ringBlast(164,156,154780);
ringBlast(84,200,154933);
ringBlast(84,200,155085);
ringBlast(112,336,155390);
ringBlast(200,244,155694);
ringBlast(260,312,155846);
ringBlast(348,336,155999);
ringBlast(440,324,156151);
ringBlast(504,248,156303);
ringBlast(432,312,156456);
ringBlast(496,236,156608);
ringBlast(424,300,156760);
ringBlast(488,224,156912);
ringBlast(416,288,157065);
ringBlast(480,212,157217);
ringBlast(368,192,157369);

leHighlight(368,8,46506,1);
leHighlight(372,100,46735,1);
leHighlight(380,112,46811,1);
leHighlight(476,152,46963,1);
leHighlight(376,316,47115,1);
leHighlight(384,228,47344,1);
leHighlight(392,216,47420,1);
leHighlight(280,316,47572,1);
leHighlight(272,328,47648,1);
leHighlight(440,312,70872,2);
leHighlight(348,319,71100,2);
leHighlight(331,312,71176,2);
leHighlight(388,208,71329,2);
leHighlight(304,24,71481,2);
leHighlight(291,44,71557,2);
leHighlight(282,66,71633,2);
leHighlight(279,90,71709,2);
leHighlight(282,114,71785,2);
leHighlight(289,137,71861,2);
leHighlight(444,344,76354,2);
leHighlight(432,324,76430,2);
leHighlight(428,300,76506,2);
leHighlight(432,276,76582,2);
leHighlight(440,252,76659,2);
leHighlight(480,164,76811,2);
leHighlight(452,72,77268,3);
leHighlight(168,112,77725,3);
leHighlight(132,336,78105,3);
leHighlight(280,256,78486,4);
leHighlight(32,204,78943,4);
leHighlight(248,60,79324,4);
leHighlight(88,304,80923,2);
leHighlight(88,304,80999,2);
leHighlight(88,304,81075,2);
leHighlight(88,200,81379,2);
leHighlight(84,172,81456,2);
leHighlight(80,144,81532,2);
leHighlight(76,116,81608,2);
leHighlight(340,40,92648,3);
leHighlight(340,40,92953,4);
leHighlight(268,96,93105,4);
leHighlight(176,100,93334,4);
leHighlight(164,104,93410,4);
leHighlight(88,48,93562,4);
leHighlight(48,136,93714,4);
leHighlight(472,348,102547,4);
leHighlight(396,240,102775,4);
leHighlight(388,252,102851,4);
leHighlight(260,312,103080,4);
leHighlight(252,324,103156,4);
leHighlight(92,344,103384,4);
leHighlight(84,356,103461,4);
leHighlight(68,324,103537,4);
leHighlight(64,288,103613,4);
leHighlight(72,252,103689,4);
leHighlight(132,100,112141,1);
leHighlight(248,208,112445,1);
leHighlight(252,216,112522,1);
leHighlight(256,224,112598,1);
leHighlight(160,320,112750,1);
leHighlight(292,352,112902,1);
leHighlight(328,348,112978,1);
leHighlight(364,344,113054,1);
leHighlight(400,340,113131,1);
leHighlight(436,336,113207,1);
leHighlight(388,164,126912,4);
leHighlight(364,68,127217,4);
leHighlight(280,128,127522,4);
leHighlight(243,143,127598,4);
leHighlight(203,148,127674,4);
leHighlight(164,141,127750,4);
leHighlight(127,125,127826,4);
leHighlight(176,138,136659,4);
leHighlight(160,142,136735,4);
leHighlight(144,146,136811,4);
leHighlight(128,150,136887,4);
leHighlight(112,154,136963,4);
leHighlight(33,262,137268,4);
leHighlight(122,367,137572,4);
leHighlight(480,64,142141,4);
leHighlight(452,76,142217,4);
leHighlight(420,80,142293,4);
leHighlight(388,76,142369,4);
leHighlight(92,96,146633,3);
leHighlight(300,348,171684,2);
leHighlight(288,344,171760,2);
leHighlight(276,340,171836,2);
leHighlight(264,336,171912,2);
leHighlight(104,128,173131,3);
leHighlight(284,80,173511,4);
leHighlight(364,12,173968,4);
leHighlight(364,252,174425,1);
leHighlight(345,261,174501,1);
leHighlight(327,270,174577,1);
leHighlight(309,280,174653,1);
leHighlight(291,289,174730,1);
leHighlight(273,298,174806,1);
leHighlight(255,308,174882,1);
leHighlight(237,317,174958,1);
leHighlight(472,288,186608,3);
leHighlight(384,320,186912,3);
leHighlight(300,284,187217,3);
leHighlight(264,266,187293,3);
leHighlight(225,260,187369,3);
leHighlight(185,266,187445,3);
leHighlight(150,284,187521,3);
leHighlight(236,96,192395,3);
leHighlight(220,100,192471,3);
leHighlight(204,104,192547,3);
leHighlight(188,108,192623,3);
leHighlight(340,236,196354,3);
leHighlight(344,228,196430,3);
leHighlight(348,220,196506,3);
leHighlight(352,212,196582,3);
leHighlight(476,132,196963,3);
leHighlight(444,40,197115,3);
leHighlight(348,40,197268,3);
leHighlight(308,128,197420,3);
leHighlight(304,320,211582,3);
leHighlight(212,328,211811,3);
leHighlight(196,336,211887,3);
leHighlight(72,352,212039,3);
leHighlight(268,104,215846,3);
leHighlight(356,88,216075,3);
leHighlight(368,96,216151,3);
leHighlight(424,180,216456,3);
leHighlight(384,264,216760,3);
leHighlight(384,264,216836,3);

sunStarBeta(200,332,57471,2,1);
sunStarBeta(104,332,57775,2,1);
sunStarBeta(56,248,58080,2,1);
sunStarBeta(104,165,58384,3,1);
sunStarBeta(104,165,58537,3,1);
sunStarBeta(200,165,58841,3,1);
sunStarBeta(200,165,58994,3,1);
sunStarBeta(248,248,59298,4,1);
sunStarBeta(200,332,59603,4,1);
sunStarBeta(104,332,59907,1,2);
sunStarBeta(104,165,60364,1,2);
sunStarBeta(248,248,60821,1,2);
sunStarBeta(60,260,75440,1,1);
sunStarBeta(248,288,75593,1,1);
sunStarBeta(112,184,75745,2,1);
sunStarBeta(184,340,75897,2,1);
sunStarBeta(272,204,76049,2,1);
sunStarBeta(364,112,76963,3,1);
sunStarBeta(256,152,77420,3,1);
sunStarBeta(124,244,77877,3,1);
sunStarBeta(144,348,78181,4,1);
sunStarBeta(168,112,78638,4,1);
sunStarBeta(256,152,79095,4,1);
sunStarBeta(240,48,79400,4,1);
sunStarBeta(388,36,79704,1,1);
sunStarBeta(500,72,79857,1,1);
sunStarBeta(500,156,80162,1,1);
sunStarBeta(500,316,80466,1,1);
sunStarBeta(388,192,80009,1,1);
sunStarBeta(388,280,80313,1,1);
sunStarBeta(304,356,80618,2,1);
sunStarBeta(44,312,123258,3,1);
sunStarBeta(116,248,123562,3,1);
sunStarBeta(200,296,123867,3,1);
sunStarBeta(128,360,124171,4,1);
sunStarBeta(128,360,124324,4,1);
sunStarBeta(44,312,124628,4,1);
sunStarBeta(44,312,124781,4,1);
sunStarBeta(116,248,125085,1,1);
sunStarBeta(200,296,125390,1,1);
sunStarBeta(200,296,125694,2,1);
sunStarBeta(296,284,125846,2,1);
sunStarBeta(264,131,126151,3,1);
sunStarBeta(226,220,126303,3,1);
sunStarBeta(374,269,126608,4,1);
sunStarBeta(374,269,126760,4,1);
sunStarBeta(488,360,141532,4,1);
sunStarBeta(488,280,141684,4,1);
sunStarBeta(396,196,141836,4,1);
sunStarBeta(396,196,141989,4,1);
sunStarBeta(360,60,142445,4,1);
sunStarBeta(268,136,142598,4,1);
sunStarBeta(172,56,142750,1,1);
sunStarBeta(4,112,143054,1,1);
sunStarBeta(108,256,143207,1,1);
sunStarBeta(20,216,143511,1,1);
sunStarBeta(40,344,143664,1,1);
sunStarBeta(132,340,143892,1,1);
sunStarBeta(144,348,143968,2,1);
sunStarBeta(312,368,144273,2,1);
sunStarBeta(432,268,144425,2,1);
sunStarBeta(264,248,144730,2,1);
sunStarBeta(392,48,144882,2,1);
sunStarBeta(392,176,145186,3,1);
sunStarBeta(288,112,145339,3,1);
sunStarBeta(180,172,145491,4,1);
sunStarBeta(296,132,145643,4,1);
sunStarBeta(172,152,145796,1,1);
sunStarBeta(300,152,145948,1,1);
sunStarBeta(172,128,146100,2,1);
sunStarBeta(292,172,146252,2,1);
sunStarBeta(180,104,146405,3,1);
sunStarBeta(92,96,146633,3,1);
sunStarBeta(84,104,146709,3,1);
sunStarBeta(16,188,146862,3,1);
sunStarBeta(92,280,147014,3,1);
sunStarBeta(280,268,147318,3,1);
sunStarBeta(252,332,171989,3,1);
sunStarBeta(16,288,172293,3,1);
sunStarBeta(256,196,172598,3,1);
sunStarBeta(20,152,172902,3,1);
sunStarBeta(112,116,173207,4,1);
sunStarBeta(448,128,173664,4,1);
sunStarBeta(284,80,174120,4,1);
sunStarBeta(219,326,175034,2,1);
sunStarBeta(92,272,175186,2,1);
sunStarBeta(184,176,175339,2,1);
sunStarBeta(184,96,175491,2,3);
sunStarBeta(332,240,191481,3,1);
sunStarBeta(480,128,191785,3,1);
sunStarBeta(308,48,192090,3,1);
sunStarBeta(172,112,192699,4,1);
sunStarBeta(20,160,193004,4,1);
sunStarBeta(32,300,193156,4,1);
sunStarBeta(184,252,193461,4,1);
sunStarBeta(312,336,193613,4,1);
sunStarBeta(404,348,193841,4,1);
sunStarBeta(416,344,193917,1,1);
sunStarBeta(368,184,194222,1,1);
sunStarBeta(416,24,194374,1,1);
sunStarBeta(368,184,194679,1,1);
sunStarBeta(264,112,194831,1,1);
sunStarBeta(128,124,195136,2,1);
sunStarBeta(40,84,195440,2,1);
sunStarBeta(24,240,195593,2,1);
sunStarBeta(188,196,195897,2,1);
sunStarBeta(292,312,196049,2,1);
sunStarBeta(356,204,196659,3,1);
sunStarBeta(208,44,197572,4,1);
sunStarBeta(53,203,197877,4,1);
sunStarBeta(130,44,198181,4,1);
sunStarBeta(130,44,198334,4,1);
sunStarBeta(132,204,198486,4,1);
sunStarBeta(132,204,198638,4,1);
sunStarBeta(284,132,198791,1,1);
sunStarBeta(436,348,199095,1,1);
sunStarBeta(359,159,199400,1,1);
sunStarBeta(359,159,199552,1,1);
sunStarBeta(360,320,199704,1,1);
sunStarBeta(360,320,199856,1,1);
sunStarBeta(232,240,200009,2,1);
sunStarBeta(192,328,200313,2,1);
sunStarBeta(96,328,200618,2,1);
sunStarBeta(60,240,200922,2,1);
sunStarBeta(148,168,201227,3,1);
sunStarBeta(154,149,201303,3,1);
sunStarBeta(158,129,201379,3,1);
sunStarBeta(160,109,201455,3,1);
sunStarBeta(159,89,201531,3,1);
sunStarBeta(155,70,201607,3,1);
sunStarBeta(148,52,201684,3,1);
sunStarBeta(280,72,201989,3,1);
sunStarBeta(444,324,219806,2,1);
sunStarBeta(424,144,219958,2,1);
sunStarBeta(288,224,220110,2,1);
sunStarBeta(456,240,220263,2,1);
sunStarBeta(328,140,220415,2,1);
sunStarBeta(484,72,220567,2,1);
sunStarBeta(336,4,220719,3,1);
sunStarBeta(92,160,221024,3,1);
sunStarBeta(328,140,221329,3,1);
sunStarBeta(168,56,221481,3,1);
sunStarBeta(256,208,221633,3,1);
sunStarBeta(257,21,221785,3,1);
*/

//MIKII
/*
ringBlast(168,76,21227);
ringBlast(168,76,21379);
ringBlast(231,12,21532);
ringBlast(262,106,21836);
ringBlast(417,78,22141);
ringBlast(407,306,22598);
ringBlast(342,243,22750);
ringBlast(268,232,22902);
ringBlast(342,243,23054);
ringBlast(302,323,23207);
ringBlast(97,246,23816);
ringBlast(97,246,23968);

leHighlight(186,234,46506,3);
leHighlight(176,334,46735,3);
leHighlight(176,334,46811,3);
leHighlight(97,312,47115,3);
leHighlight(20,275,47344,3);
leHighlight(20,275,47420,3);
leHighlight(283,252,70872,4);
leHighlight(280,104,71176,4);
leHighlight(283,252,71481,4);
leHighlight(347,314,71633,4);
leHighlight(122,279,75973,4);
leHighlight(418,42,81151,4);
leHighlight(424,49,81227,4);
leHighlight(350,192,81532,4);
leHighlight(227,150,92648,1);
leHighlight(227,150,92953,1);
leHighlight(227,150,93258,1);
leHighlight(150,315,93714,1);
leHighlight(309,168,102395,1);
leHighlight(327,38,102775,1);
leHighlight(335,41,102851,1);
leHighlight(406,80,103004,2);
leHighlight(393,160,103308,2);
leHighlight(309,168,103613,2);
leHighlight(157,244,112293,2);
leHighlight(249,40,112598,2);
leHighlight(86,78,112902,2);
leHighlight(249,40,113207,2);
leHighlight(392,304,126912,1);
leHighlight(480,292,127217,1);
leHighlight(425,217,127369,1);
leHighlight(425,217,127445,1);
leHighlight(425,217,127522,1);
leHighlight(108,103,136659,1);
leHighlight(248,96,136963,1);
leHighlight(108,103,137268,1);
leHighlight(262,194,137572,1);
leHighlight(230,155,186608,2);
leHighlight(376,136,186912,2);
leHighlight(230,155,187217,2);
leHighlight(267,236,187369,2);
leHighlight(187,286,196354,2);
leHighlight(156,222,196659,2);
leHighlight(188,114,196963,3);
leHighlight(149,66,197268,3);
leHighlight(65,258,211582,2);
leHighlight(55,172,211811,2);
leHighlight(51,161,211887,2);
leHighlight(140,156,212039,2);
leHighlight(179,203,215846,2);
leHighlight(195,50,216151,2);
leHighlight(179,203,216456,2);
leHighlight(261,241,216608,2);

sunStarBeta(227,351,57471,3,1);
sunStarBeta(92,340,57775,3,1);
sunStarBeta(227,351,58080,3,1);
sunStarBeta(345,240,58384,3,1);
sunStarBeta(345,240,58537,3,1);
sunStarBeta(209,152,58841,3,1);
sunStarBeta(209,152,58994,3,1);
sunStarBeta(223,231,59298,4,1);
sunStarBeta(285,179,59603,4,1);
sunStarBeta(272,99,59907,1,2);
sunStarBeta(195,70,60364,2,2);
sunStarBeta(132,120,60821,3,2);
sunStarBeta(250,297,75593,4,1);
sunStarBeta(116,286,76049,4,1);
sunStarBeta(193,202,76354,4,1);
sunStarBeta(87,39,76659,2,1);
sunStarBeta(134,204,76963,1,1);
sunStarBeta(360,264,77420,1,1);
sunStarBeta(291,141,77877,1,1);
sunStarBeta(210,110,78181,2,1);
sunStarBeta(254,31,78334,2,1);
sunStarBeta(478,85,78638,2,1);
sunStarBeta(454,182,79095,2,1);
sunStarBeta(381,264,79247,2,1);
sunStarBeta(381,264,79400,3,1);
sunStarBeta(229,299,79704,3,1);
sunStarBeta(232,213,80009,3,1);
sunStarBeta(223,53,80313,3,1);
sunStarBeta(304,118,80618,4,1);
sunStarBeta(304,118,80770,4,1);
sunStarBeta(338,28,80923,4,1);
sunStarBeta(227,174,123258,3,1);
sunStarBeta(227,174,125694,4,1);
sunStarBeta(149,249,126151,4,1);
sunStarBeta(256,292,126608,4,1);
sunStarBeta(272,269,141379,1,1);
sunStarBeta(493,195,141836,1,1);
sunStarBeta(432,90,142141,1,1);
sunStarBeta(283,56,142445,1,1);
sunStarBeta(317,199,142750,2,1);
sunStarBeta(109,129,143207,2,1);
sunStarBeta(123,364,143664,2,1);
sunStarBeta(35,342,143816,2,1);
sunStarBeta(96,278,143968,3,1);
sunStarBeta(330,322,144425,3,1);
sunStarBeta(419,309,144882,3,1);
sunStarBeta(436,145,145186,4,1);
sunStarBeta(436,145,145339,4,1);
sunStarBeta(471,62,145491,4,1);
sunStarBeta(309,31,145796,1,1);
sunStarBeta(309,31,145948,1,1);
sunStarBeta(249,120,146100,1,1);
sunStarBeta(217,41,146405,2,1);
sunStarBeta(131,39,146633,2,1);
sunStarBeta(120,46,146709,2,1);
sunStarBeta(123,181,147014,2,1);
sunStarBeta(120,46,147318,2,1);
sunStarBeta(62,115,147471,2,1);
sunStarBeta(59,319,171989,3,1);
sunStarBeta(66,106,172445,3,1);
sunStarBeta(148,66,172598,3,1);
sunStarBeta(189,206,172902,3,1);
sunStarBeta(262,169,173054,3,1);
sunStarBeta(229,94,173207,4,1);
sunStarBeta(429,125,173664,4,1);
sunStarBeta(351,235,173968,4,1);
sunStarBeta(293,347,174273,4,1);
sunStarBeta(293,347,174425,1,1);
sunStarBeta(156,328,174730,1,1);
sunStarBeta(293,347,175034,1,1);
sunStarBeta(163,248,175339,1,1);
sunStarBeta(139,101,175643,1,3);
sunStarBeta(223,238,191329,2,1);
sunStarBeta(310,37,191785,2,1);
sunStarBeta(409,164,192090,2,1);
sunStarBeta(496,135,192395,2,1);
sunStarBeta(320,110,192699,3,1);
sunStarBeta(94,46,193156,3,1);
sunStarBeta(120,202,193460,3,1);
sunStarBeta(70,277,193613,3,1);
sunStarBeta(120,202,193917,4,1);
sunStarBeta(202,274,194374,4,1);
sunStarBeta(278,320,194679,4,1);
sunStarBeta(356,362,194831,4,1);
sunStarBeta(437,242,195136,1,1);
sunStarBeta(361,32,195593,1,1);
sunStarBeta(263,158,196049,1,1);
sunStarBeta(102,47,197572,4,1);
sunStarBeta(106,131,197877,4,1);
sunStarBeta(89,212,198181,1,1);
sunStarBeta(171,256,198486,1,1);
sunStarBeta(259,259,198791,2,1);
sunStarBeta(353,201,199095,2,1);
sunStarBeta(293,51,199400,3,1);
sunStarBeta(222,111,199704,3,1);
sunStarBeta(222,111,200009,4,1);
sunStarBeta(32,179,200466,4,1);
sunStarBeta(101,235,200618,4,1);
sunStarBeta(264,224,200923,4,1);
sunStarBeta(231,307,201075,4,1);
sunStarBeta(319,293,201227,1,1);
sunStarBeta(374,221,201684,1,1);
sunStarBeta(456,48,201989,1,1);
sunStarBeta(6,109,219806,2,1);
sunStarBeta(146,27,220110,3,1);
sunStarBeta(369,76,220415,3,1);
sunStarBeta(213,125,220719,4,1);
sunStarBeta(141,306,221024,4,1);
sunStarBeta(231,285,221329,1,1);
sunStarBeta(377,354,221633,1,1);
sunStarBeta(382,264,221785,1,1);
*/

//FINAL TRIGGER
/*
ringBlast(248,364,21227);
ringBlast(142,351,21379);
ringBlast(288,224,21532);
ringBlast(406,209,21684);
ringBlast(512,348,21836);
ringBlast(369,329,21988);
ringBlast(240,116,22141);
ringBlast(288,224,22598);
ringBlast(192,12,22750);
ringBlast(420,96,22902);
ringBlast(168,192,23054);
ringBlast(456,260,23207);
ringBlast(257,203,23816);
ringBlast(456,260,23968);
ringBlast(452,176,24730);
ringBlast(452,176,24806);
ringBlast(452,176,24882);
ringBlast(212,100,148841);
ringBlast(56,24,149298);
ringBlast(148,184,149450);
ringBlast(1,108,149755);
ringBlast(13,336,150060);
ringBlast(148,184,150212);
ringBlast(1,108,150669);
ringBlast(148,184,150821);
ringBlast(240,40,150973);
ringBlast(92,116,151125);
ringBlast(184,288,151278);
ringBlast(184,288,151582);
ringBlast(80,264,151887);
ringBlast(108,360,152039);
ringBlast(273,281,152192);
ringBlast(184,116,152496);
ringBlast(424,12,152953);
ringBlast(336,192,153105);
ringBlast(296,20,153410);
ringBlast(296,20,153714);
ringBlast(363,99,153867);
ringBlast(425,183,154019);
ringBlast(475,5,154171);
ringBlast(136,120,154628);
ringBlast(225,127,154856);
ringBlast(225,127,154932);
ringBlast(72,192,155085);
ringBlast(96,32,155237);
ringBlast(176,220,155390);
ringBlast(53,105,155846);
ringBlast(0,380,156151);
ringBlast(37,299,156303);
ringBlast(96,368,156456);
ringBlast(156,232,156608);
ringBlast(256,344,156760);
ringBlast(292,244,157065);

leHighlight(400,103,46506,1);
leHighlight(350,80,46582,1);
leHighlight(296,89,46659,1);
leHighlight(256,125,46735,1);
leHighlight(210,153,46811,1);
leHighlight(156,147,46887,1);
leHighlight(119,106,46963,1);
leHighlight(115,52,47039,1);
leHighlight(148,9,47115,2);
leHighlight(202,2,47192,2);
leHighlight(250,25,47268,2);
leHighlight(271,74,47344,2);
leHighlight(256,125,47420,2);
leHighlight(272,176,47496,2);
leHighlight(316,205,47572,2);
leHighlight(369,207,47648,2);
leHighlight(265,316,70872,2);
leHighlight(426,264,71024,2);
leHighlight(426,264,71100,2);
leHighlight(426,264,71176,2);
leHighlight(296,161,71329,2);
leHighlight(249,144,71405,2);
leHighlight(201,158,71481,2);
leHighlight(172,198,71557,2);
leHighlight(127,219,71633,2);
leHighlight(77,214,71709,2);
leHighlight(37,184,71785,2);
leHighlight(52,112,76354,1);
leHighlight(91,83,76430,1);
leHighlight(140,79,76506,1);
leHighlight(186,96,76582,1);
leHighlight(223,129,76658,1);
leHighlight(260,162,76735,1);
leHighlight(306,179,76811,1);
leHighlight(355,175,76887,1);
leHighlight(136,184,78029,4);
leHighlight(136,184,78105,4);
leHighlight(72,348,80847,2);
leHighlight(46,306,80923,2);
leHighlight(43,257,80999,2);
leHighlight(63,212,81075,2);
leHighlight(101,181,81151,2);
leHighlight(156,168,81227,3);
leHighlight(217,171,81303,3);
leHighlight(279,175,81379,3);
leHighlight(341,179,81455,3);
leHighlight(403,182,81532,3);
leHighlight(429,133,91735,4);
leHighlight(400,237,91887,4);
leHighlight(505,213,92039,4);
leHighlight(283,33,92192,1);
leHighlight(312,137,92344,1);
leHighlight(207,113,92496,1);
leHighlight(451,308,92648,2);
leHighlight(276,257,92953,2);
leHighlight(145,331,93105,2);
leHighlight(187,338,93181,2);
leHighlight(229,326,93258,2);
leHighlight(260,297,93334,2);
leHighlight(276,257,93410,2);
leHighlight(182,242,93562,2);
leHighlight(182,242,93714,2);
leHighlight(182,242,93867,2);
leHighlight(183,215,102851,2);
leHighlight(230,244,102927,2);
leHighlight(285,246,103003,2);
leHighlight(335,221,103079,2);
leHighlight(366,175,103155,2);
leHighlight(366,117,103232,2);
leHighlight(341,68,103308,2);
leHighlight(294,38,103384,2);
leHighlight(240,32,103460,3);
leHighlight(196,63,103537,3);
leHighlight(144,75,103613,3);
leHighlight(91,67,103689,3);
leHighlight(184,316,112293,3);
leHighlight(230,334,112369,3);
leHighlight(280,333,112445,3);
leHighlight(326,311,112521,3);
leHighlight(359,273,112597,3);
leHighlight(375,225,112674,3);
leHighlight(371,175,112750,3);
leHighlight(348,131,112826,3);
leHighlight(308,99,112902,4);
leHighlight(164,132,113054,4);
leHighlight(20,156,113207,4);
leHighlight(268,213,126912,1);
leHighlight(272,226,126989,1);
leHighlight(276,239,127065,1);
leHighlight(280,252,127141,1);
leHighlight(284,265,127217,1);
leHighlight(288,278,127293,1);
leHighlight(292,291,127369,1);
leHighlight(296,304,127445,1);
leHighlight(132,324,136659,1);
leHighlight(300,352,136888,1);
leHighlight(338,375,136963,1);
leHighlight(382,382,137040,1);
leHighlight(426,372,137116,1);
leHighlight(462,344,137192,1);
leHighlight(485,306,137268,2);
leHighlight(488,250,137344,2);
leHighlight(465,199,137420,2);
leHighlight(423,163,137496,2);
leHighlight(369,150,137572,2);
leHighlight(112,383,142217,2);
leHighlight(162,376,142293,2);
leHighlight(206,352,142369,2);
leHighlight(230,308,142445,2);
leHighlight(264,271,142522,2);
leHighlight(312,255,142598,2);
leHighlight(358,259,142674,2);
leHighlight(143,22,143816,1);
leHighlight(143,22,143892,1);
leHighlight(206,357,145034,2);
leHighlight(206,357,145110,2);
leHighlight(322,118,146557,4);
leHighlight(318,108,146633,4);
leHighlight(365,94,171836,2);
leHighlight(365,94,171912,2);
leHighlight(274,245,172141,2);
leHighlight(274,245,172217,2);
leHighlight(122,151,172445,2);
leHighlight(122,151,172521,2);
leHighlight(217,3,172750,2);
leHighlight(217,3,172826,2);
leHighlight(249,125,173054,3);
leHighlight(215,167,173131,3);
leHighlight(227,219,173207,3);
leHighlight(274,245,173283,3);
leHighlight(327,236,173359,3);
leHighlight(353,189,173435,3);
leHighlight(339,136,173511,3);
leHighlight(365,88,173587,3);
leHighlight(418,77,173664,3);
leHighlight(463,106,173740,3);
leHighlight(472,158,173816,3);
leHighlight(108,252,186608,1);
leHighlight(116,288,186684,1);
leHighlight(124,324,186760,1);
leHighlight(132,360,186836,1);
leHighlight(172,376,186912,2);
leHighlight(226,368,186988,2);
leHighlight(267,331,187064,2);
leHighlight(282,277,187140,2);
leHighlight(264,225,187217,3);
leHighlight(300,268,187293,3);
leHighlight(356,285,187369,3);
leHighlight(412,268,187445,3);
leHighlight(449,224,187521,3);
leHighlight(301,234,192090,4);
leHighlight(268,277,192166,4);
leHighlight(215,288,192242,4);
leHighlight(166,264,192318,4);
leHighlight(148,212,192395,4);
leHighlight(162,160,192471,4);
leHighlight(209,133,192547,4);
leHighlight(262,138,192623,4);
leHighlight(227,32,193765,1);
leHighlight(242,35,193841,1);
leHighlight(340,0,196354,4);
leHighlight(345,15,196430,4);
leHighlight(349,30,196506,4);
leHighlight(353,45,196582,4);
leHighlight(357,60,196659,4);
leHighlight(361,75,196735,4);
leHighlight(365,90,196811,4);
leHighlight(369,105,196887,4);
leHighlight(373,120,196964,1);
leHighlight(333,84,197039,1);
leHighlight(279,80,197115,1);
leHighlight(228,100,197192,1);
leHighlight(196,143,197268,1);
leHighlight(154,177,197344,1);
leHighlight(102,193,197420,1);
leHighlight(50,177,197496,1);
leHighlight(216,324,211582,4);
leHighlight(364,376,211735,4);
leHighlight(380,323,211811,4);
leHighlight(369,269,211887,4);
leHighlight(332,228,211963,4);
leHighlight(293,187,212039,4);
leHighlight(282,133,212115,4);
leHighlight(345,138,215846,2);
leHighlight(172,152,215999,2);
leHighlight(120,177,216075,2);
leHighlight(65,162,216151,2);
leHighlight(34,114,216227,2);
leHighlight(43,57,216303,2);
leHighlight(87,21,216379,2);
leHighlight(145,24,216456,3);
leHighlight(136,41,216532,3);
leHighlight(128,59,216608,3);
leHighlight(120,77,216684,3);
leHighlight(112,95,216760,3);

sunStarBeta(20,24,57471,3,1);
sunStarBeta(208,96,57775,3,1);
sunStarBeta(396,168,58080,3,1);
sunStarBeta(208,96,58384,4,1);
sunStarBeta(300,132,58536,4,1);
sunStarBeta(112,60,58842,1,1);
sunStarBeta(20,24,58994,1,1);
sunStarBeta(208,96,59298,2,1);
sunStarBeta(396,168,59603,2,1);
sunStarBeta(336,28,59907,3,2);
sunStarBeta(396,168,60364,4,2);
sunStarBeta(377,319,60821,1,2);
sunStarBeta(160,380,75745,3,1);
sunStarBeta(128,168,75897,3,1);
sunStarBeta(332,96,76049,4,1);
sunStarBeta(300,308,76201,4,1);
sunStarBeta(394,146,76963,2,1);
sunStarBeta(256,8,77115,2,1);
sunStarBeta(256,8,77268,2,1);
sunStarBeta(232,256,77420,3,1);
sunStarBeta(324,76,77572,3,1);
sunStarBeta(324,76,77725,3,1);
sunStarBeta(328,328,77877,4,1);
sunStarBeta(136,184,78181,1,1);
sunStarBeta(228,124,78486,1,1);
sunStarBeta(208,284,78638,1,1);
sunStarBeta(308,176,78943,1,1);
sunStarBeta(140,39,79095,1,1);
sunStarBeta(208,284,79400,2,1);
sunStarBeta(228,124,79552,2,1);
sunStarBeta(333,352,79704,3,1);
sunStarBeta(308,176,79856,3,1);
sunStarBeta(416,56,80009,4,1);
sunStarBeta(392,248,80161,4,1);
sunStarBeta(480,124,80313,1,1);
sunStarBeta(509,322,80465,1,1);
sunStarBeta(252,340,80618,2,1);
sunStarBeta(141,377,123258,1,1);
sunStarBeta(233,320,123562,1,1);
sunStarBeta(328,259,123867,1,1);
sunStarBeta(185,217,124171,2,1);
sunStarBeta(233,320,124324,2,1);
sunStarBeta(283,160,124628,3,1);
sunStarBeta(233,320,124780,3,1);
sunStarBeta(328,259,125085,3,1);
sunStarBeta(283,160,125390,3,1);
sunStarBeta(185,217,125694,4,1);
sunStarBeta(120,167,126151,4,1);
sunStarBeta(109,79,126608,4,1);
sunStarBeta(300,317,127522,2,1);
sunStarBeta(358,218,127674,2,1);
sunStarBeta(328,80,127826,2,1);
sunStarBeta(29,210,141532,2,1);
sunStarBeta(247,162,141684,2,1);
sunStarBeta(7,290,141836,2,1);
sunStarBeta(222,73,141989,2,1);
sunStarBeta(65,367,142141,2,1);
sunStarBeta(404,287,142750,3,1);
sunStarBeta(206,352,142902,3,1);
sunStarBeta(206,352,143054,3,1);
sunStarBeta(404,287,143207,4,1);
sunStarBeta(164,166,143359,4,1);
sunStarBeta(164,166,143511,4,1);
sunStarBeta(368,66,143664,1,1);
sunStarBeta(143,22,143968,2,1);
sunStarBeta(164,166,144273,2,1);
sunStarBeta(368,66,144425,2,1);
sunStarBeta(182,265,144730,2,1);
sunStarBeta(368,66,144882,2,1);
sunStarBeta(206,357,145186,3,1);
sunStarBeta(287,197,145339,3,1);
sunStarBeta(458,163,145491,3,1);
sunStarBeta(377,323,145643,3,1);
sunStarBeta(83,326,145796,3,1);
sunStarBeta(164,166,145949,3,1);
sunStarBeta(368,37,146100,3,1);
sunStarBeta(287,197,146252,3,1);
sunStarBeta(61,132,146405,4,1);
sunStarBeta(314,98,146709,4,1);
sunStarBeta(387,187,146862,4,1);
sunStarBeta(322,289,147014,4,1);
sunStarBeta(206,262,147166,4,1);
sunStarBeta(198,140,147318,4,1);
sunStarBeta(365,94,171989,2,1);
sunStarBeta(274,245,172294,2,1);
sunStarBeta(122,151,172598,2,1);
sunStarBeta(217,3,172903,2,1);
sunStarBeta(286,180,173968,4,1);
sunStarBeta(472,158,174273,4,1);
sunStarBeta(286,180,174425,1,1);
sunStarBeta(135,129,174577,1,1);
sunStarBeta(287,3,174730,2,1);
sunStarBeta(448,39,174882,2,1);
sunStarBeta(238,359,175034,3,1);
sunStarBeta(367,22,175186,3,1);
sunStarBeta(433,338,175339,4,1);
sunStarBeta(210,155,175491,4,1);
sunStarBeta(210,155,175643,1,3);
sunStarBeta(414,317,191481,3,1);
sunStarBeta(229,211,191633,3,1);
sunStarBeta(432,147,191785,3,1);
sunStarBeta(247,41,191937,3,1);
sunStarBeta(229,211,192699,1,1);
sunStarBeta(341,86,193004,1,1);
sunStarBeta(162,300,193156,1,1);
sunStarBeta(412,36,193461,1,1);
sunStarBeta(469,253,193613,1,1);
sunStarBeta(257,37,193917,2,1);
sunStarBeta(162,300,194222,2,1);
sunStarBeta(362,237,194374,2,1);
sunStarBeta(102,193,194679,2,1);
sunStarBeta(366,337,194831,2,1);
sunStarBeta(282,223,195060,2,1);
sunStarBeta(282,223,195136,3,1);
sunStarBeta(457,129,195440,3,1);
sunStarBeta(162,300,195593,3,1);
sunStarBeta(377,169,195897,3,1);
sunStarBeta(102,193,196049,3,1);
sunStarBeta(12,138,197572,2,1);
sunStarBeta(51,368,197725,2,1);
sunStarBeta(103,91,197877,3,1);
sunStarBeta(142,321,198030,3,1);
sunStarBeta(204,97,198181,4,1);
sunStarBeta(243,327,198334,4,1);
sunStarBeta(295,50,198486,1,1);
sunStarBeta(334,280,198639,1,1);
sunStarBeta(396,56,198790,2,1);
sunStarBeta(435,286,198943,2,1);
sunStarBeta(295,50,199095,3,1);
sunStarBeta(334,280,199247,3,1);
sunStarBeta(204,97,199400,4,1);
sunStarBeta(243,327,199552,4,1);
sunStarBeta(243,327,199628,4,1);
sunStarBeta(243,327,199704,4,1);
sunStarBeta(103,91,199857,4,1);
sunStarBeta(142,321,200009,1,1);
sunStarBeta(388,195,200161,1,1);
sunStarBeta(388,195,200237,1,1);
sunStarBeta(388,195,200313,1,1);
sunStarBeta(51,368,200466,1,1);
sunStarBeta(204,97,200618,2,1);
sunStarBeta(199,118,200694,2,1);
sunStarBeta(194,139,200770,2,1);
sunStarBeta(189,160,200847,2,1);
sunStarBeta(184,181,200923,2,1);
sunStarBeta(179,202,200998,2,1);
sunStarBeta(174,223,201075,2,1);
sunStarBeta(169,244,201151,2,1);
sunStarBeta(164,265,201227,3,1);
sunStarBeta(207,232,201303,3,1);
sunStarBeta(260,232,201379,3,1);
sunStarBeta(307,258,201456,3,1);
sunStarBeta(348,291,201532,3,1);
sunStarBeta(401,298,201608,3,1);
sunStarBeta(451,278,201684,3,1);
sunStarBeta(483,235,201760,3,1);
sunStarBeta(489,181,201836,4,1);
sunStarBeta(469,130,201912,4,1);
sunStarBeta(424,97,201989,4,1);
sunStarBeta(370,93,202065,4,1);
sunStarBeta(321,115,202141,4,1);
sunStarBeta(108,41,219806,1,1);
sunStarBeta(60,212,219958,1,1);
sunStarBeta(176,92,220110,2,1);
sunStarBeta(172,286,220262,2,1);
sunStarBeta(244,136,220415,3,1);
sunStarBeta(294,343,220567,3,1);
sunStarBeta(396,221,220719,4,1);
sunStarBeta(172,286,220871,4,1);
sunStarBeta(323,174,221024,1,1);
sunStarBeta(66,180,221176,1,1);
sunStarBeta(359,99,221329,2,1);
sunStarBeta(85,31,221481,2,1);
sunStarBeta(172,286,221633,3,1);
sunStarBeta(233,22,221785,3,1);
*/

//LITTLE
/*
ringBlast(396,288,21227);
ringBlast(476,212,21532);
ringBlast(450,104,21836);
ringBlast(343,72,22141);
ringBlast(188,44,22598);
ringBlast(108,100,22902);
ringBlast(176,188,23207);

leHighlight(0,189,46506,2);
leHighlight(200,292,47420,2);
leHighlight(358,132,70872,2);
leHighlight(264,188,71176,2);
leHighlight(164,72,71785,3);
leHighlight(288,340,81075,2);
leHighlight(363,283,81379,2);
leHighlight(273,166,92648,3);
leHighlight(120,132,93105,3);
leHighlight(120,132,93410,3);
leHighlight(251,111,102547,3);
leHighlight(192,288,103156,3);
leHighlight(210,215,112445,3);
leHighlight(56,248,112902,3);
leHighlight(49,138,113207,3);
leHighlight(56,248,113511,3);
leHighlight(376,364,126912,4);
leHighlight(284,252,127826,4);
leHighlight(160,208,136659,4);
leHighlight(232,20,137268,4);
leHighlight(328,76,137572,4);
leHighlight(148,152,186608,4);
leHighlight(220,236,186912,4);
leHighlight(416,172,187521,4);
leHighlight(428,176,196202,4);
leHighlight(276,188,196659,4);
leHighlight(266,78,196963,4);
leHighlight(276,188,197268,4);
leHighlight(316,340,211582,2);
leHighlight(472,372,212039,3);
leHighlight(356,112,215846,4);
leHighlight(248,104,216151,4);
leHighlight(220,208,216456,4);

sunStarBeta(240,184,57471,2,1);
sunStarBeta(112,312,75593,4,1);
sunStarBeta(109,258,75745,4,1);
sunStarBeta(200,196,76049,4,1);
sunStarBeta(203,142,76202,4,1);
sunStarBeta(172,96,76354,4,1);
sunStarBeta(8,184,76963,1,1);
sunStarBeta(88,320,77420,1,1);
sunStarBeta(356,331,78181,1,1);
sunStarBeta(244,148,78943,1,1);
sunStarBeta(136,60,79400,2,1);
sunStarBeta(104,219,79857,2,1);
sunStarBeta(54,241,80009,2,1);
sunStarBeta(124,328,80313,2,1);
sunStarBeta(124,328,80618,2,1);
sunStarBeta(332,184,123258,3,1);
sunStarBeta(408,52,125694,4,1);
sunStarBeta(372,200,126151,4,1);
sunStarBeta(376,364,126608,4,1);
sunStarBeta(172,228,141379,2,1);
sunStarBeta(190,278,141532,2,1);
sunStarBeta(300,296,141836,2,1);
sunStarBeta(334,254,141989,2,1);
sunStarBeta(384,228,142141,2,1);
sunStarBeta(284,80,142750,3,1);
sunStarBeta(180,188,143207,3,1);
sunStarBeta(212,232,143968,3,1);
sunStarBeta(316,340,144425,3,1);
sunStarBeta(472,348,144882,3,1);
sunStarBeta(472,348,145186,4,1);
sunStarBeta(460,188,145643,4,1);
sunStarBeta(474,134,145796,4,1);
sunStarBeta(396,56,146100,4,1);
sunStarBeta(288,84,146405,4,1);
sunStarBeta(184,79,146709,4,1);
sunStarBeta(116,164,147014,4,1);
sunStarBeta(128,328,147471,4,1);
sunStarBeta(216,56,171989,3,1);
sunStarBeta(256,156,172293,3,1);
sunStarBeta(324,72,172598,3,1);
sunStarBeta(364,172,172902,3,1);
sunStarBeta(431,87,173207,3,1);
sunStarBeta(456,240,173664,3,1);
sunStarBeta(368,304,173968,3,1);
sunStarBeta(212,336,174425,4,1);
sunStarBeta(108,300,174730,4,1);
sunStarBeta(87,191,175034,4,1);
sunStarBeta(170,118,175339,4,1);
sunStarBeta(274,153,175643,4,3);
sunStarBeta(136,268,191329,2,1);
sunStarBeta(141,323,191481,2,1);
sunStarBeta(244,356,191785,2,1);
sunStarBeta(249,301,191938,2,1);
sunStarBeta(272,252,192090,2,1);
sunStarBeta(464,176,192699,3,1);
sunStarBeta(376,64,193156,3,1);
sunStarBeta(219,75,193613,3,1);
sunStarBeta(116,116,193917,3,1);
sunStarBeta(70,168,194374,3,1);
sunStarBeta(156,240,194679,3,1);
sunStarBeta(243,356,195136,4,1);
sunStarBeta(400,356,195593,4,1);
sunStarBeta(476,276,195897,4,1);
sunStarBeta(266,78,196963,4,1);
sunStarBeta(276,188,197268,4,1);
sunStarBeta(364,256,197572,1,1);
sunStarBeta(260,360,198029,1,1);
sunStarBeta(103,359,198486,1,1);
sunStarBeta(36,272,198791,1,1);
sunStarBeta(45,162,199095,1,1);
sunStarBeta(152,132,199400,1,1);
sunStarBeta(142,241,199704,1,1);
sunStarBeta(236,296,200009,2,1);
sunStarBeta(392,296,200466,2,1);
sunStarBeta(468,216,200770,2,1);
sunStarBeta(468,216,201075,2,1);
sunStarBeta(477,106,201379,2,1);
sunStarBeta(468,216,201684,2,1);
sunStarBeta(392,296,201989,2,1);
sunStarBeta(408,88,219806,2,1);
sunStarBeta(356,184,220110,2,1);
sunStarBeta(452,240,220415,2,1);
sunStarBeta(400,336,220719,2,1);
sunStarBeta(288,336,221024,2,1);
sunStarBeta(188,300,221329,2,1);
sunStarBeta(187,193,221633,2,1);
sunStarBeta(196,140,221785,2,1);
*/

//EASY
/*
ringBlast(329,95,20770);
ringBlast(455,27,21532);
ringBlast(277,10,22141);
ringBlast(260,168,22750);
ringBlast(308,292,23207);
ringBlast(103,325,23968);
ringBlast(159,183,24577);
ringBlast(248,192,24882);

leHighlight(249,205,46506,3);
leHighlight(96,204,47420,3);
leHighlight(144,119,70872,1);
leHighlight(128,32,71176,1);
leHighlight(212,63,71481,1);
leHighlight(314,158,80923,1);
leHighlight(398,189,81227,1);
leHighlight(298,165,92648,2);
leHighlight(432,140,93105,2);
leHighlight(428,231,93410,2);
leHighlight(340,248,93714,2);
leHighlight(414,332,102547,1);
leHighlight(376,252,102851,1);
leHighlight(293,289,103156,1);
leHighlight(255,366,103461,1);
leHighlight(432,355,112293,2);
leHighlight(261,89,136659,4);
leHighlight(344,92,136963,4);
leHighlight(391,165,137268,4);
leHighlight(420,100,171989,4);
leHighlight(440,188,172293,4);
leHighlight(420,100,172598,4);
leHighlight(386,16,172902,4);
leHighlight(308,62,173207,4);
leHighlight(220,81,173511,4);
leHighlight(308,62,173816,4);
leHighlight(386,16,174120,4);
leHighlight(264,103,186608,1);
leHighlight(176,84,186912,1);
leHighlight(118,153,187217,1);
leHighlight(303,207,200618,3);
leHighlight(284,296,200923,3);
leHighlight(249,377,201227,3);
leHighlight(156,252,201836,3);
leHighlight(448,144,211582,3);
leHighlight(448,52,211887,3);
leHighlight(437,139,215846,1);
leHighlight(338,21,216456,1);

sunStarBeta(175,98,57471,4,1);
sunStarBeta(164,240,75440,3,1);
sunStarBeta(86,192,75745,3,1);
sunStarBeta(2,215,76049,3,1);
sunStarBeta(86,192,76354,3,1);
sunStarBeta(127,112,76659,3,1);
sunStarBeta(127,22,76963,4,1);
sunStarBeta(252,68,77420,4,1);
sunStarBeta(127,22,77877,4,1);
sunStarBeta(127,112,78181,4,1);
sunStarBeta(1,158,78638,4,1);
sunStarBeta(127,112,79095,4,1);
sunStarBeta(208,152,79400,1,1);
sunStarBeta(232,232,79704,1,1);
sunStarBeta(317,249,80009,1,1);
sunStarBeta(264,320,80313,1,1);
sunStarBeta(317,249,80618,1,1);
sunStarBeta(139,358,123258,3,1);
sunStarBeta(189,228,126912,4,1);
sunStarBeta(100,268,127522,4,1);
sunStarBeta(156,201,141532,2,1);
sunStarBeta(198,126,141836,2,1);
sunStarBeta(272,75,142141,2,1);
sunStarBeta(314,148,142445,2,1);
sunStarBeta(361,71,142750,3,1);
sunStarBeta(495,42,143207,3,1);
sunStarBeta(361,71,143664,3,1);
sunStarBeta(314,148,143968,3,1);
sunStarBeta(182,176,144425,3,1);
sunStarBeta(314,148,144882,3,1);
sunStarBeta(401,168,145186,4,1);
sunStarBeta(424,248,145491,4,1);
sunStarBeta(350,304,145796,4,1);
sunStarBeta(260,324,146100,4,1);
sunStarBeta(350,304,146405,4,1);
sunStarBeta(204,252,147014,4,1);
sunStarBeta(72,286,147471,1,1);
sunStarBeta(420,100,174425,4,1);
sunStarBeta(314,290,175643,1,3);
sunStarBeta(106,132,191481,3,1);
sunStarBeta(122,220,192090,3,1);
sunStarBeta(200,266,192699,4,1);
sunStarBeta(319,289,193156,4,1);
sunStarBeta(200,266,193613,4,1);
sunStarBeta(122,220,193917,4,1);
sunStarBeta(4,200,194374,4,1);
sunStarBeta(122,220,194831,4,1);
sunStarBeta(185,155,195136,1,1);
sunStarBeta(185,155,196049,1,1);
sunStarBeta(246,221,196354,1,1);
sunStarBeta(246,221,197268,1,1);
sunStarBeta(321,171,197572,2,1);
sunStarBeta(336,84,197877,2,1);
sunStarBeta(416,127,198181,2,1);
sunStarBeta(432,40,198486,2,1);
sunStarBeta(511,83,198791,2,1);
sunStarBeta(492,172,199095,2,1);
sunStarBeta(474,259,199400,2,1);
sunStarBeta(456,348,199704,2,1);
sunStarBeta(375,309,200009,3,1);
sunStarBeta(392,220,200313,3,1);
sunStarBeta(248,120,219806,3,1);
sunStarBeta(255,33,220110,3,1);
sunStarBeta(328,80,220415,3,1);
sunStarBeta(409,41,220719,3,1);
sunStarBeta(404,128,224024,3,1);
sunStarBeta(488,161,221329,3,1);
sunStarBeta(376,212,221785,3,1);
*/



